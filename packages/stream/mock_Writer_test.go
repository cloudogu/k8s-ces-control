// Code generated by mockery v2.20.0. DO NOT EDIT.

package stream

import mock "github.com/stretchr/testify/mock"

// MockWriter is an autogenerated mock type for the Writer type
type MockWriter struct {
	mock.Mock
}

type MockWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWriter) EXPECT() *MockWriter_Expecter {
	return &MockWriter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *MockWriter) Execute(_a0 []byte, _a1 GRPCStreamServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, GRPCStreamServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWriter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockWriter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 []byte
//   - _a1 GRPCStreamServer
func (_e *MockWriter_Expecter) Execute(_a0 interface{}, _a1 interface{}) *MockWriter_Execute_Call {
	return &MockWriter_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1)}
}

func (_c *MockWriter_Execute_Call) Run(run func(_a0 []byte, _a1 GRPCStreamServer)) *MockWriter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(GRPCStreamServer))
	})
	return _c
}

func (_c *MockWriter_Execute_Call) Return(_a0 error) *MockWriter_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWriter_Execute_Call) RunAndReturn(run func([]byte, GRPCStreamServer) error) *MockWriter_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockWriter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockWriter creates a new instance of MockWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockWriter(t mockConstructorTestingTNewMockWriter) *MockWriter {
	mock := &MockWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
