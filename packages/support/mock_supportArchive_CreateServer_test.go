// Code generated by mockery v2.42.1. DO NOT EDIT.

package support

import (
	context "context"

	types "github.com/cloudogu/ces-control-api/generated/types"
	mock "github.com/stretchr/testify/mock"
)

// mockSupportArchive_CreateServer is an autogenerated mock type for the supportArchive_CreateServer type
type mockSupportArchive_CreateServer struct {
	mock.Mock
}

type mockSupportArchive_CreateServer_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSupportArchive_CreateServer) EXPECT() *mockSupportArchive_CreateServer_Expecter {
	return &mockSupportArchive_CreateServer_Expecter{mock: &_m.Mock}
}

// Context provides a mock function with given fields:
func (_m *mockSupportArchive_CreateServer) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// mockSupportArchive_CreateServer_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type mockSupportArchive_CreateServer_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *mockSupportArchive_CreateServer_Expecter) Context() *mockSupportArchive_CreateServer_Context_Call {
	return &mockSupportArchive_CreateServer_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *mockSupportArchive_CreateServer_Context_Call) Run(run func()) *mockSupportArchive_CreateServer_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockSupportArchive_CreateServer_Context_Call) Return(_a0 context.Context) *mockSupportArchive_CreateServer_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSupportArchive_CreateServer_Context_Call) RunAndReturn(run func() context.Context) *mockSupportArchive_CreateServer_Context_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: response
func (_m *mockSupportArchive_CreateServer) Send(response *types.ChunkedDataResponse) error {
	ret := _m.Called(response)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.ChunkedDataResponse) error); ok {
		r0 = rf(response)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSupportArchive_CreateServer_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type mockSupportArchive_CreateServer_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - response *types.ChunkedDataResponse
func (_e *mockSupportArchive_CreateServer_Expecter) Send(response interface{}) *mockSupportArchive_CreateServer_Send_Call {
	return &mockSupportArchive_CreateServer_Send_Call{Call: _e.mock.On("Send", response)}
}

func (_c *mockSupportArchive_CreateServer_Send_Call) Run(run func(response *types.ChunkedDataResponse)) *mockSupportArchive_CreateServer_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.ChunkedDataResponse))
	})
	return _c
}

func (_c *mockSupportArchive_CreateServer_Send_Call) Return(_a0 error) *mockSupportArchive_CreateServer_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSupportArchive_CreateServer_Send_Call) RunAndReturn(run func(*types.ChunkedDataResponse) error) *mockSupportArchive_CreateServer_Send_Call {
	_c.Call.Return(run)
	return _c
}

// newMockSupportArchive_CreateServer creates a new instance of mockSupportArchive_CreateServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockSupportArchive_CreateServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockSupportArchive_CreateServer {
	mock := &mockSupportArchive_CreateServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
