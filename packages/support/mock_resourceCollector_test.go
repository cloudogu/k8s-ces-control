// Code generated by mockery v2.53.3. DO NOT EDIT.

package support

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	labels "k8s.io/apimachinery/pkg/labels"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// mockResourceCollector is an autogenerated mock type for the resourceCollector type
type mockResourceCollector struct {
	mock.Mock
}

type mockResourceCollector_Expecter struct {
	mock *mock.Mock
}

func (_m *mockResourceCollector) EXPECT() *mockResourceCollector_Expecter {
	return &mockResourceCollector_Expecter{mock: &_m.Mock}
}

// Collect provides a mock function with given fields: ctx, labelSelector, excludedGVKs
func (_m *mockResourceCollector) Collect(ctx context.Context, labelSelector *v1.LabelSelector, excludedGVKs []gvkMatcher) ([]*unstructured.Unstructured, error) {
	ret := _m.Called(ctx, labelSelector, excludedGVKs)

	if len(ret) == 0 {
		panic("no return value specified for Collect")
	}

	var r0 []*unstructured.Unstructured
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.LabelSelector, []gvkMatcher) ([]*unstructured.Unstructured, error)); ok {
		return rf(ctx, labelSelector, excludedGVKs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.LabelSelector, []gvkMatcher) []*unstructured.Unstructured); ok {
		r0 = rf(ctx, labelSelector, excludedGVKs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*unstructured.Unstructured)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.LabelSelector, []gvkMatcher) error); ok {
		r1 = rf(ctx, labelSelector, excludedGVKs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockResourceCollector_Collect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Collect'
type mockResourceCollector_Collect_Call struct {
	*mock.Call
}

// Collect is a helper method to define mock.On call
//   - ctx context.Context
//   - labelSelector *v1.LabelSelector
//   - excludedGVKs []gvkMatcher
func (_e *mockResourceCollector_Expecter) Collect(ctx interface{}, labelSelector interface{}, excludedGVKs interface{}) *mockResourceCollector_Collect_Call {
	return &mockResourceCollector_Collect_Call{Call: _e.mock.On("Collect", ctx, labelSelector, excludedGVKs)}
}

func (_c *mockResourceCollector_Collect_Call) Run(run func(ctx context.Context, labelSelector *v1.LabelSelector, excludedGVKs []gvkMatcher)) *mockResourceCollector_Collect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.LabelSelector), args[2].([]gvkMatcher))
	})
	return _c
}

func (_c *mockResourceCollector_Collect_Call) Return(_a0 []*unstructured.Unstructured, _a1 error) *mockResourceCollector_Collect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockResourceCollector_Collect_Call) RunAndReturn(run func(context.Context, *v1.LabelSelector, []gvkMatcher) ([]*unstructured.Unstructured, error)) *mockResourceCollector_Collect_Call {
	_c.Call.Return(run)
	return _c
}

// listApiResourcesByLabelSelector provides a mock function with given fields: ctx, list, selector, excludedGVKs
func (_m *mockResourceCollector) listApiResourcesByLabelSelector(ctx context.Context, list *v1.APIResourceList, selector labels.Selector, excludedGVKs []gvkMatcher) ([]*unstructured.Unstructured, []error) {
	ret := _m.Called(ctx, list, selector, excludedGVKs)

	if len(ret) == 0 {
		panic("no return value specified for listApiResourcesByLabelSelector")
	}

	var r0 []*unstructured.Unstructured
	var r1 []error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.APIResourceList, labels.Selector, []gvkMatcher) ([]*unstructured.Unstructured, []error)); ok {
		return rf(ctx, list, selector, excludedGVKs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.APIResourceList, labels.Selector, []gvkMatcher) []*unstructured.Unstructured); ok {
		r0 = rf(ctx, list, selector, excludedGVKs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*unstructured.Unstructured)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.APIResourceList, labels.Selector, []gvkMatcher) []error); ok {
		r1 = rf(ctx, list, selector, excludedGVKs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]error)
		}
	}

	return r0, r1
}

// mockResourceCollector_listApiResourcesByLabelSelector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'listApiResourcesByLabelSelector'
type mockResourceCollector_listApiResourcesByLabelSelector_Call struct {
	*mock.Call
}

// listApiResourcesByLabelSelector is a helper method to define mock.On call
//   - ctx context.Context
//   - list *v1.APIResourceList
//   - selector labels.Selector
//   - excludedGVKs []gvkMatcher
func (_e *mockResourceCollector_Expecter) listApiResourcesByLabelSelector(ctx interface{}, list interface{}, selector interface{}, excludedGVKs interface{}) *mockResourceCollector_listApiResourcesByLabelSelector_Call {
	return &mockResourceCollector_listApiResourcesByLabelSelector_Call{Call: _e.mock.On("listApiResourcesByLabelSelector", ctx, list, selector, excludedGVKs)}
}

func (_c *mockResourceCollector_listApiResourcesByLabelSelector_Call) Run(run func(ctx context.Context, list *v1.APIResourceList, selector labels.Selector, excludedGVKs []gvkMatcher)) *mockResourceCollector_listApiResourcesByLabelSelector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.APIResourceList), args[2].(labels.Selector), args[3].([]gvkMatcher))
	})
	return _c
}

func (_c *mockResourceCollector_listApiResourcesByLabelSelector_Call) Return(_a0 []*unstructured.Unstructured, _a1 []error) *mockResourceCollector_listApiResourcesByLabelSelector_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockResourceCollector_listApiResourcesByLabelSelector_Call) RunAndReturn(run func(context.Context, *v1.APIResourceList, labels.Selector, []gvkMatcher) ([]*unstructured.Unstructured, []error)) *mockResourceCollector_listApiResourcesByLabelSelector_Call {
	_c.Call.Return(run)
	return _c
}

// listByLabelSelector provides a mock function with given fields: ctx, resource, labelSelector, excludedGVKs
func (_m *mockResourceCollector) listByLabelSelector(ctx context.Context, resource v1.APIResource, labelSelector labels.Selector, excludedGVKs []gvkMatcher) ([]*unstructured.Unstructured, error) {
	ret := _m.Called(ctx, resource, labelSelector, excludedGVKs)

	if len(ret) == 0 {
		panic("no return value specified for listByLabelSelector")
	}

	var r0 []*unstructured.Unstructured
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.APIResource, labels.Selector, []gvkMatcher) ([]*unstructured.Unstructured, error)); ok {
		return rf(ctx, resource, labelSelector, excludedGVKs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.APIResource, labels.Selector, []gvkMatcher) []*unstructured.Unstructured); ok {
		r0 = rf(ctx, resource, labelSelector, excludedGVKs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*unstructured.Unstructured)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.APIResource, labels.Selector, []gvkMatcher) error); ok {
		r1 = rf(ctx, resource, labelSelector, excludedGVKs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockResourceCollector_listByLabelSelector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'listByLabelSelector'
type mockResourceCollector_listByLabelSelector_Call struct {
	*mock.Call
}

// listByLabelSelector is a helper method to define mock.On call
//   - ctx context.Context
//   - resource v1.APIResource
//   - labelSelector labels.Selector
//   - excludedGVKs []gvkMatcher
func (_e *mockResourceCollector_Expecter) listByLabelSelector(ctx interface{}, resource interface{}, labelSelector interface{}, excludedGVKs interface{}) *mockResourceCollector_listByLabelSelector_Call {
	return &mockResourceCollector_listByLabelSelector_Call{Call: _e.mock.On("listByLabelSelector", ctx, resource, labelSelector, excludedGVKs)}
}

func (_c *mockResourceCollector_listByLabelSelector_Call) Run(run func(ctx context.Context, resource v1.APIResource, labelSelector labels.Selector, excludedGVKs []gvkMatcher)) *mockResourceCollector_listByLabelSelector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1.APIResource), args[2].(labels.Selector), args[3].([]gvkMatcher))
	})
	return _c
}

func (_c *mockResourceCollector_listByLabelSelector_Call) Return(_a0 []*unstructured.Unstructured, _a1 error) *mockResourceCollector_listByLabelSelector_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockResourceCollector_listByLabelSelector_Call) RunAndReturn(run func(context.Context, v1.APIResource, labels.Selector, []gvkMatcher) ([]*unstructured.Unstructured, error)) *mockResourceCollector_listByLabelSelector_Call {
	_c.Call.Return(run)
	return _c
}

// newMockResourceCollector creates a new instance of mockResourceCollector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockResourceCollector(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockResourceCollector {
	mock := &mockResourceCollector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
