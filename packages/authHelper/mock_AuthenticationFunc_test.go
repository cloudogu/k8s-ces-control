// Code generated by mockery v2.20.0. DO NOT EDIT.

package authHelper

import (
	context "context"

	account "github.com/cloudogu/k8s-ces-control/packages/account"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthenticationFunc is an autogenerated mock type for the AuthenticationFunc type
type MockAuthenticationFunc struct {
	mock.Mock
}

type MockAuthenticationFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthenticationFunc) EXPECT() *MockAuthenticationFunc_Expecter {
	return &MockAuthenticationFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, serviceName
func (_m *MockAuthenticationFunc) Execute(ctx context.Context, serviceName string) (account.ServiceAccountData, error) {
	ret := _m.Called(ctx, serviceName)

	var r0 account.ServiceAccountData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (account.ServiceAccountData, error)); ok {
		return rf(ctx, serviceName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) account.ServiceAccountData); ok {
		r0 = rf(ctx, serviceName)
	} else {
		r0 = ret.Get(0).(account.ServiceAccountData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serviceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthenticationFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockAuthenticationFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceName string
func (_e *MockAuthenticationFunc_Expecter) Execute(ctx interface{}, serviceName interface{}) *MockAuthenticationFunc_Execute_Call {
	return &MockAuthenticationFunc_Execute_Call{Call: _e.mock.On("Execute", ctx, serviceName)}
}

func (_c *MockAuthenticationFunc_Execute_Call) Run(run func(ctx context.Context, serviceName string)) *MockAuthenticationFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthenticationFunc_Execute_Call) Return(_a0 account.ServiceAccountData, _a1 error) *MockAuthenticationFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthenticationFunc_Execute_Call) RunAndReturn(run func(context.Context, string) (account.ServiceAccountData, error)) *MockAuthenticationFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockAuthenticationFunc interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAuthenticationFunc creates a new instance of MockAuthenticationFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAuthenticationFunc(t mockConstructorTestingTNewMockAuthenticationFunc) *MockAuthenticationFunc {
	mock := &MockAuthenticationFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
