// Code generated by mockery v2.42.1. DO NOT EDIT.

package debug

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockDebugModeRegistry is an autogenerated mock type for the debugModeRegistry type
type mockDebugModeRegistry struct {
	mock.Mock
}

type mockDebugModeRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDebugModeRegistry) EXPECT() *mockDebugModeRegistry_Expecter {
	return &mockDebugModeRegistry_Expecter{mock: &_m.Mock}
}

// BackupDoguLogLevels provides a mock function with given fields: ctx
func (_m *mockDebugModeRegistry) BackupDoguLogLevels(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BackupDoguLogLevels")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDebugModeRegistry_BackupDoguLogLevels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackupDoguLogLevels'
type mockDebugModeRegistry_BackupDoguLogLevels_Call struct {
	*mock.Call
}

// BackupDoguLogLevels is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockDebugModeRegistry_Expecter) BackupDoguLogLevels(ctx interface{}) *mockDebugModeRegistry_BackupDoguLogLevels_Call {
	return &mockDebugModeRegistry_BackupDoguLogLevels_Call{Call: _e.mock.On("BackupDoguLogLevels", ctx)}
}

func (_c *mockDebugModeRegistry_BackupDoguLogLevels_Call) Run(run func(ctx context.Context)) *mockDebugModeRegistry_BackupDoguLogLevels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockDebugModeRegistry_BackupDoguLogLevels_Call) Return(_a0 error) *mockDebugModeRegistry_BackupDoguLogLevels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDebugModeRegistry_BackupDoguLogLevels_Call) RunAndReturn(run func(context.Context) error) *mockDebugModeRegistry_BackupDoguLogLevels_Call {
	_c.Call.Return(run)
	return _c
}

// Disable provides a mock function with given fields: ctx
func (_m *mockDebugModeRegistry) Disable(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Disable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDebugModeRegistry_Disable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disable'
type mockDebugModeRegistry_Disable_Call struct {
	*mock.Call
}

// Disable is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockDebugModeRegistry_Expecter) Disable(ctx interface{}) *mockDebugModeRegistry_Disable_Call {
	return &mockDebugModeRegistry_Disable_Call{Call: _e.mock.On("Disable", ctx)}
}

func (_c *mockDebugModeRegistry_Disable_Call) Run(run func(ctx context.Context)) *mockDebugModeRegistry_Disable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockDebugModeRegistry_Disable_Call) Return(_a0 error) *mockDebugModeRegistry_Disable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDebugModeRegistry_Disable_Call) RunAndReturn(run func(context.Context) error) *mockDebugModeRegistry_Disable_Call {
	_c.Call.Return(run)
	return _c
}

// Enable provides a mock function with given fields: ctx, timer
func (_m *mockDebugModeRegistry) Enable(ctx context.Context, timer int32) error {
	ret := _m.Called(ctx, timer)

	if len(ret) == 0 {
		panic("no return value specified for Enable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, timer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDebugModeRegistry_Enable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enable'
type mockDebugModeRegistry_Enable_Call struct {
	*mock.Call
}

// Enable is a helper method to define mock.On call
//   - ctx context.Context
//   - timer int32
func (_e *mockDebugModeRegistry_Expecter) Enable(ctx interface{}, timer interface{}) *mockDebugModeRegistry_Enable_Call {
	return &mockDebugModeRegistry_Enable_Call{Call: _e.mock.On("Enable", ctx, timer)}
}

func (_c *mockDebugModeRegistry_Enable_Call) Run(run func(ctx context.Context, timer int32)) *mockDebugModeRegistry_Enable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *mockDebugModeRegistry_Enable_Call) Return(_a0 error) *mockDebugModeRegistry_Enable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDebugModeRegistry_Enable_Call) RunAndReturn(run func(context.Context, int32) error) *mockDebugModeRegistry_Enable_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreDoguLogLevels provides a mock function with given fields: ctx
func (_m *mockDebugModeRegistry) RestoreDoguLogLevels(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDoguLogLevels")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDebugModeRegistry_RestoreDoguLogLevels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreDoguLogLevels'
type mockDebugModeRegistry_RestoreDoguLogLevels_Call struct {
	*mock.Call
}

// RestoreDoguLogLevels is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockDebugModeRegistry_Expecter) RestoreDoguLogLevels(ctx interface{}) *mockDebugModeRegistry_RestoreDoguLogLevels_Call {
	return &mockDebugModeRegistry_RestoreDoguLogLevels_Call{Call: _e.mock.On("RestoreDoguLogLevels", ctx)}
}

func (_c *mockDebugModeRegistry_RestoreDoguLogLevels_Call) Run(run func(ctx context.Context)) *mockDebugModeRegistry_RestoreDoguLogLevels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockDebugModeRegistry_RestoreDoguLogLevels_Call) Return(_a0 error) *mockDebugModeRegistry_RestoreDoguLogLevels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDebugModeRegistry_RestoreDoguLogLevels_Call) RunAndReturn(run func(context.Context) error) *mockDebugModeRegistry_RestoreDoguLogLevels_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: ctx
func (_m *mockDebugModeRegistry) Status(ctx context.Context) (bool, int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 bool
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) int64); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockDebugModeRegistry_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type mockDebugModeRegistry_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockDebugModeRegistry_Expecter) Status(ctx interface{}) *mockDebugModeRegistry_Status_Call {
	return &mockDebugModeRegistry_Status_Call{Call: _e.mock.On("Status", ctx)}
}

func (_c *mockDebugModeRegistry_Status_Call) Run(run func(ctx context.Context)) *mockDebugModeRegistry_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockDebugModeRegistry_Status_Call) Return(isEnabled bool, DisableAtTimestamp int64, err error) *mockDebugModeRegistry_Status_Call {
	_c.Call.Return(isEnabled, DisableAtTimestamp, err)
	return _c
}

func (_c *mockDebugModeRegistry_Status_Call) RunAndReturn(run func(context.Context) (bool, int64, error)) *mockDebugModeRegistry_Status_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDebugModeRegistry creates a new instance of mockDebugModeRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDebugModeRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDebugModeRegistry {
	mock := &mockDebugModeRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
