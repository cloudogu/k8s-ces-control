// Code generated by mockery v2.42.1. DO NOT EDIT.

package debug

import (
	config "github.com/cloudogu/k8s-registry-lib/config"
	mock "github.com/stretchr/testify/mock"
)

// mockDoguConfig is an autogenerated mock type for the doguConfig type
type mockDoguConfig struct {
	mock.Mock
}

type mockDoguConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDoguConfig) EXPECT() *mockDoguConfig_Expecter {
	return &mockDoguConfig_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: k
func (_m *mockDoguConfig) Delete(k config.Key) config.Config {
	ret := _m.Called(k)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 config.Config
	if rf, ok := ret.Get(0).(func(config.Key) config.Config); ok {
		r0 = rf(k)
	} else {
		r0 = ret.Get(0).(config.Config)
	}

	return r0
}

// mockDoguConfig_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockDoguConfig_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - k config.Key
func (_e *mockDoguConfig_Expecter) Delete(k interface{}) *mockDoguConfig_Delete_Call {
	return &mockDoguConfig_Delete_Call{Call: _e.mock.On("Delete", k)}
}

func (_c *mockDoguConfig_Delete_Call) Run(run func(k config.Key)) *mockDoguConfig_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.Key))
	})
	return _c
}

func (_c *mockDoguConfig_Delete_Call) Return(_a0 config.Config) *mockDoguConfig_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDoguConfig_Delete_Call) RunAndReturn(run func(config.Key) config.Config) *mockDoguConfig_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAll provides a mock function with given fields:
func (_m *mockDoguConfig) DeleteAll() config.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteAll")
	}

	var r0 config.Config
	if rf, ok := ret.Get(0).(func() config.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.Config)
	}

	return r0
}

// mockDoguConfig_DeleteAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAll'
type mockDoguConfig_DeleteAll_Call struct {
	*mock.Call
}

// DeleteAll is a helper method to define mock.On call
func (_e *mockDoguConfig_Expecter) DeleteAll() *mockDoguConfig_DeleteAll_Call {
	return &mockDoguConfig_DeleteAll_Call{Call: _e.mock.On("DeleteAll")}
}

func (_c *mockDoguConfig_DeleteAll_Call) Run(run func()) *mockDoguConfig_DeleteAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDoguConfig_DeleteAll_Call) Return(_a0 config.Config) *mockDoguConfig_DeleteAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDoguConfig_DeleteAll_Call) RunAndReturn(run func() config.Config) *mockDoguConfig_DeleteAll_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRecursive provides a mock function with given fields: k
func (_m *mockDoguConfig) DeleteRecursive(k config.Key) config.Config {
	ret := _m.Called(k)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecursive")
	}

	var r0 config.Config
	if rf, ok := ret.Get(0).(func(config.Key) config.Config); ok {
		r0 = rf(k)
	} else {
		r0 = ret.Get(0).(config.Config)
	}

	return r0
}

// mockDoguConfig_DeleteRecursive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRecursive'
type mockDoguConfig_DeleteRecursive_Call struct {
	*mock.Call
}

// DeleteRecursive is a helper method to define mock.On call
//   - k config.Key
func (_e *mockDoguConfig_Expecter) DeleteRecursive(k interface{}) *mockDoguConfig_DeleteRecursive_Call {
	return &mockDoguConfig_DeleteRecursive_Call{Call: _e.mock.On("DeleteRecursive", k)}
}

func (_c *mockDoguConfig_DeleteRecursive_Call) Run(run func(k config.Key)) *mockDoguConfig_DeleteRecursive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.Key))
	})
	return _c
}

func (_c *mockDoguConfig_DeleteRecursive_Call) Return(_a0 config.Config) *mockDoguConfig_DeleteRecursive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDoguConfig_DeleteRecursive_Call) RunAndReturn(run func(config.Key) config.Config) *mockDoguConfig_DeleteRecursive_Call {
	_c.Call.Return(run)
	return _c
}

// Diff provides a mock function with given fields: other
func (_m *mockDoguConfig) Diff(other config.Config) []config.DiffResult {
	ret := _m.Called(other)

	if len(ret) == 0 {
		panic("no return value specified for Diff")
	}

	var r0 []config.DiffResult
	if rf, ok := ret.Get(0).(func(config.Config) []config.DiffResult); ok {
		r0 = rf(other)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]config.DiffResult)
		}
	}

	return r0
}

// mockDoguConfig_Diff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Diff'
type mockDoguConfig_Diff_Call struct {
	*mock.Call
}

// Diff is a helper method to define mock.On call
//   - other config.Config
func (_e *mockDoguConfig_Expecter) Diff(other interface{}) *mockDoguConfig_Diff_Call {
	return &mockDoguConfig_Diff_Call{Call: _e.mock.On("Diff", other)}
}

func (_c *mockDoguConfig_Diff_Call) Run(run func(other config.Config)) *mockDoguConfig_Diff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.Config))
	})
	return _c
}

func (_c *mockDoguConfig_Diff_Call) Return(_a0 []config.DiffResult) *mockDoguConfig_Diff_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDoguConfig_Diff_Call) RunAndReturn(run func(config.Config) []config.DiffResult) *mockDoguConfig_Diff_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: k
func (_m *mockDoguConfig) Get(k config.Key) (config.Value, bool) {
	ret := _m.Called(k)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 config.Value
	var r1 bool
	if rf, ok := ret.Get(0).(func(config.Key) (config.Value, bool)); ok {
		return rf(k)
	}
	if rf, ok := ret.Get(0).(func(config.Key) config.Value); ok {
		r0 = rf(k)
	} else {
		r0 = ret.Get(0).(config.Value)
	}

	if rf, ok := ret.Get(1).(func(config.Key) bool); ok {
		r1 = rf(k)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// mockDoguConfig_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockDoguConfig_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - k config.Key
func (_e *mockDoguConfig_Expecter) Get(k interface{}) *mockDoguConfig_Get_Call {
	return &mockDoguConfig_Get_Call{Call: _e.mock.On("Get", k)}
}

func (_c *mockDoguConfig_Get_Call) Run(run func(k config.Key)) *mockDoguConfig_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.Key))
	})
	return _c
}

func (_c *mockDoguConfig_Get_Call) Return(_a0 config.Value, _a1 bool) *mockDoguConfig_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDoguConfig_Get_Call) RunAndReturn(run func(config.Key) (config.Value, bool)) *mockDoguConfig_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *mockDoguConfig) GetAll() config.Entries {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 config.Entries
	if rf, ok := ret.Get(0).(func() config.Entries); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.Entries)
		}
	}

	return r0
}

// mockDoguConfig_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type mockDoguConfig_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *mockDoguConfig_Expecter) GetAll() *mockDoguConfig_GetAll_Call {
	return &mockDoguConfig_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *mockDoguConfig_GetAll_Call) Run(run func()) *mockDoguConfig_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDoguConfig_GetAll_Call) Return(_a0 config.Entries) *mockDoguConfig_GetAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDoguConfig_GetAll_Call) RunAndReturn(run func() config.Entries) *mockDoguConfig_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetChangeHistory provides a mock function with given fields:
func (_m *mockDoguConfig) GetChangeHistory() []config.Change {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetChangeHistory")
	}

	var r0 []config.Change
	if rf, ok := ret.Get(0).(func() []config.Change); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]config.Change)
		}
	}

	return r0
}

// mockDoguConfig_GetChangeHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChangeHistory'
type mockDoguConfig_GetChangeHistory_Call struct {
	*mock.Call
}

// GetChangeHistory is a helper method to define mock.On call
func (_e *mockDoguConfig_Expecter) GetChangeHistory() *mockDoguConfig_GetChangeHistory_Call {
	return &mockDoguConfig_GetChangeHistory_Call{Call: _e.mock.On("GetChangeHistory")}
}

func (_c *mockDoguConfig_GetChangeHistory_Call) Run(run func()) *mockDoguConfig_GetChangeHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDoguConfig_GetChangeHistory_Call) Return(_a0 []config.Change) *mockDoguConfig_GetChangeHistory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDoguConfig_GetChangeHistory_Call) RunAndReturn(run func() []config.Change) *mockDoguConfig_GetChangeHistory_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: k, v
func (_m *mockDoguConfig) Set(k config.Key, v config.Value) (config.Config, error) {
	ret := _m.Called(k, v)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 config.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(config.Key, config.Value) (config.Config, error)); ok {
		return rf(k, v)
	}
	if rf, ok := ret.Get(0).(func(config.Key, config.Value) config.Config); ok {
		r0 = rf(k, v)
	} else {
		r0 = ret.Get(0).(config.Config)
	}

	if rf, ok := ret.Get(1).(func(config.Key, config.Value) error); ok {
		r1 = rf(k, v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDoguConfig_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type mockDoguConfig_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - k config.Key
//   - v config.Value
func (_e *mockDoguConfig_Expecter) Set(k interface{}, v interface{}) *mockDoguConfig_Set_Call {
	return &mockDoguConfig_Set_Call{Call: _e.mock.On("Set", k, v)}
}

func (_c *mockDoguConfig_Set_Call) Run(run func(k config.Key, v config.Value)) *mockDoguConfig_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.Key), args[1].(config.Value))
	})
	return _c
}

func (_c *mockDoguConfig_Set_Call) Return(_a0 config.Config, _a1 error) *mockDoguConfig_Set_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDoguConfig_Set_Call) RunAndReturn(run func(config.Key, config.Value) (config.Config, error)) *mockDoguConfig_Set_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *mockDoguConfig) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// mockDoguConfig_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type mockDoguConfig_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *mockDoguConfig_Expecter) String() *mockDoguConfig_String_Call {
	return &mockDoguConfig_String_Call{Call: _e.mock.On("String")}
}

func (_c *mockDoguConfig_String_Call) Run(run func()) *mockDoguConfig_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDoguConfig_String_Call) Return(_a0 string) *mockDoguConfig_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDoguConfig_String_Call) RunAndReturn(run func() string) *mockDoguConfig_String_Call {
	_c.Call.Return(run)
	return _c
}

// createCopy provides a mock function with given fields:
func (_m *mockDoguConfig) createCopy() config.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for createCopy")
	}

	var r0 config.Config
	if rf, ok := ret.Get(0).(func() config.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(config.Config)
	}

	return r0
}

// mockDoguConfig_createCopy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'createCopy'
type mockDoguConfig_createCopy_Call struct {
	*mock.Call
}

// createCopy is a helper method to define mock.On call
func (_e *mockDoguConfig_Expecter) createCopy() *mockDoguConfig_createCopy_Call {
	return &mockDoguConfig_createCopy_Call{Call: _e.mock.On("createCopy")}
}

func (_c *mockDoguConfig_createCopy_Call) Run(run func()) *mockDoguConfig_createCopy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDoguConfig_createCopy_Call) Return(_a0 config.Config) *mockDoguConfig_createCopy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDoguConfig_createCopy_Call) RunAndReturn(run func() config.Config) *mockDoguConfig_createCopy_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDoguConfig creates a new instance of mockDoguConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDoguConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDoguConfig {
	mock := &mockDoguConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
