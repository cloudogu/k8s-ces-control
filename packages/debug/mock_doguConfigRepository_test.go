// Code generated by mockery v2.42.1. DO NOT EDIT.

package debug

import (
	context "context"

	config "github.com/cloudogu/k8s-registry-lib/config"

	mock "github.com/stretchr/testify/mock"

	repository "github.com/cloudogu/k8s-registry-lib/repository"
)

// mockDoguConfigRepository is an autogenerated mock type for the doguConfigRepository type
type mockDoguConfigRepository struct {
	mock.Mock
}

type mockDoguConfigRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDoguConfigRepository) EXPECT() *mockDoguConfigRepository_Expecter {
	return &mockDoguConfigRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *mockDoguConfigRepository) Create(_a0 context.Context, _a1 config.DoguConfig) (config.DoguConfig, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 config.DoguConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.DoguConfig) (config.DoguConfig, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.DoguConfig) config.DoguConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(config.DoguConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.DoguConfig) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDoguConfigRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type mockDoguConfigRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 config.DoguConfig
func (_e *mockDoguConfigRepository_Expecter) Create(_a0 interface{}, _a1 interface{}) *mockDoguConfigRepository_Create_Call {
	return &mockDoguConfigRepository_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *mockDoguConfigRepository_Create_Call) Run(run func(_a0 context.Context, _a1 config.DoguConfig)) *mockDoguConfigRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.DoguConfig))
	})
	return _c
}

func (_c *mockDoguConfigRepository_Create_Call) Return(_a0 config.DoguConfig, _a1 error) *mockDoguConfigRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDoguConfigRepository_Create_Call) RunAndReturn(run func(context.Context, config.DoguConfig) (config.DoguConfig, error)) *mockDoguConfigRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *mockDoguConfigRepository) Delete(_a0 context.Context, _a1 config.SimpleDoguName) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, config.SimpleDoguName) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDoguConfigRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type mockDoguConfigRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 config.SimpleDoguName
func (_e *mockDoguConfigRepository_Expecter) Delete(_a0 interface{}, _a1 interface{}) *mockDoguConfigRepository_Delete_Call {
	return &mockDoguConfigRepository_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *mockDoguConfigRepository_Delete_Call) Run(run func(_a0 context.Context, _a1 config.SimpleDoguName)) *mockDoguConfigRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.SimpleDoguName))
	})
	return _c
}

func (_c *mockDoguConfigRepository_Delete_Call) Return(_a0 error) *mockDoguConfigRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDoguConfigRepository_Delete_Call) RunAndReturn(run func(context.Context, config.SimpleDoguName) error) *mockDoguConfigRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *mockDoguConfigRepository) Get(_a0 context.Context, _a1 config.SimpleDoguName) (config.DoguConfig, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 config.DoguConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.SimpleDoguName) (config.DoguConfig, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.SimpleDoguName) config.DoguConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(config.DoguConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.SimpleDoguName) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDoguConfigRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type mockDoguConfigRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 config.SimpleDoguName
func (_e *mockDoguConfigRepository_Expecter) Get(_a0 interface{}, _a1 interface{}) *mockDoguConfigRepository_Get_Call {
	return &mockDoguConfigRepository_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *mockDoguConfigRepository_Get_Call) Run(run func(_a0 context.Context, _a1 config.SimpleDoguName)) *mockDoguConfigRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.SimpleDoguName))
	})
	return _c
}

func (_c *mockDoguConfigRepository_Get_Call) Return(_a0 config.DoguConfig, _a1 error) *mockDoguConfigRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDoguConfigRepository_Get_Call) RunAndReturn(run func(context.Context, config.SimpleDoguName) (config.DoguConfig, error)) *mockDoguConfigRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// SaveOrMerge provides a mock function with given fields: _a0, _a1
func (_m *mockDoguConfigRepository) SaveOrMerge(_a0 context.Context, _a1 config.DoguConfig) (config.DoguConfig, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveOrMerge")
	}

	var r0 config.DoguConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.DoguConfig) (config.DoguConfig, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.DoguConfig) config.DoguConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(config.DoguConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.DoguConfig) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDoguConfigRepository_SaveOrMerge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveOrMerge'
type mockDoguConfigRepository_SaveOrMerge_Call struct {
	*mock.Call
}

// SaveOrMerge is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 config.DoguConfig
func (_e *mockDoguConfigRepository_Expecter) SaveOrMerge(_a0 interface{}, _a1 interface{}) *mockDoguConfigRepository_SaveOrMerge_Call {
	return &mockDoguConfigRepository_SaveOrMerge_Call{Call: _e.mock.On("SaveOrMerge", _a0, _a1)}
}

func (_c *mockDoguConfigRepository_SaveOrMerge_Call) Run(run func(_a0 context.Context, _a1 config.DoguConfig)) *mockDoguConfigRepository_SaveOrMerge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.DoguConfig))
	})
	return _c
}

func (_c *mockDoguConfigRepository_SaveOrMerge_Call) Return(_a0 config.DoguConfig, _a1 error) *mockDoguConfigRepository_SaveOrMerge_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDoguConfigRepository_SaveOrMerge_Call) RunAndReturn(run func(context.Context, config.DoguConfig) (config.DoguConfig, error)) *mockDoguConfigRepository_SaveOrMerge_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *mockDoguConfigRepository) Update(_a0 context.Context, _a1 config.DoguConfig) (config.DoguConfig, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 config.DoguConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.DoguConfig) (config.DoguConfig, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.DoguConfig) config.DoguConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(config.DoguConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.DoguConfig) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDoguConfigRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type mockDoguConfigRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 config.DoguConfig
func (_e *mockDoguConfigRepository_Expecter) Update(_a0 interface{}, _a1 interface{}) *mockDoguConfigRepository_Update_Call {
	return &mockDoguConfigRepository_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *mockDoguConfigRepository_Update_Call) Run(run func(_a0 context.Context, _a1 config.DoguConfig)) *mockDoguConfigRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(config.DoguConfig))
	})
	return _c
}

func (_c *mockDoguConfigRepository_Update_Call) Return(_a0 config.DoguConfig, _a1 error) *mockDoguConfigRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDoguConfigRepository_Update_Call) RunAndReturn(run func(context.Context, config.DoguConfig) (config.DoguConfig, error)) *mockDoguConfigRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: ctx, dName, filters
func (_m *mockDoguConfigRepository) Watch(ctx context.Context, dName config.SimpleDoguName, filters ...config.WatchFilter) (<-chan repository.DoguConfigWatchResult, error) {
	_va := make([]interface{}, len(filters))
	for _i := range filters {
		_va[_i] = filters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dName)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 <-chan repository.DoguConfigWatchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, config.SimpleDoguName, ...config.WatchFilter) (<-chan repository.DoguConfigWatchResult, error)); ok {
		return rf(ctx, dName, filters...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, config.SimpleDoguName, ...config.WatchFilter) <-chan repository.DoguConfigWatchResult); ok {
		r0 = rf(ctx, dName, filters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan repository.DoguConfigWatchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, config.SimpleDoguName, ...config.WatchFilter) error); ok {
		r1 = rf(ctx, dName, filters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDoguConfigRepository_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type mockDoguConfigRepository_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - ctx context.Context
//   - dName config.SimpleDoguName
//   - filters ...config.WatchFilter
func (_e *mockDoguConfigRepository_Expecter) Watch(ctx interface{}, dName interface{}, filters ...interface{}) *mockDoguConfigRepository_Watch_Call {
	return &mockDoguConfigRepository_Watch_Call{Call: _e.mock.On("Watch",
		append([]interface{}{ctx, dName}, filters...)...)}
}

func (_c *mockDoguConfigRepository_Watch_Call) Run(run func(ctx context.Context, dName config.SimpleDoguName, filters ...config.WatchFilter)) *mockDoguConfigRepository_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]config.WatchFilter, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(config.WatchFilter)
			}
		}
		run(args[0].(context.Context), args[1].(config.SimpleDoguName), variadicArgs...)
	})
	return _c
}

func (_c *mockDoguConfigRepository_Watch_Call) Return(_a0 <-chan repository.DoguConfigWatchResult, _a1 error) *mockDoguConfigRepository_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDoguConfigRepository_Watch_Call) RunAndReturn(run func(context.Context, config.SimpleDoguName, ...config.WatchFilter) (<-chan repository.DoguConfigWatchResult, error)) *mockDoguConfigRepository_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDoguConfigRepository creates a new instance of mockDoguConfigRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDoguConfigRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDoguConfigRepository {
	mock := &mockDoguConfigRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
