// Code generated by mockery v2.20.0. DO NOT EDIT.

package debug

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockDoguInterActor is an autogenerated mock type for the doguInterActor type
type mockDoguInterActor struct {
	mock.Mock
}

type mockDoguInterActor_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDoguInterActor) EXPECT() *mockDoguInterActor_Expecter {
	return &mockDoguInterActor_Expecter{mock: &_m.Mock}
}

// SetLogLevelInAllDogus provides a mock function with given fields: ctx, logLevel
func (_m *mockDoguInterActor) SetLogLevelInAllDogus(ctx context.Context, logLevel string) error {
	ret := _m.Called(ctx, logLevel)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, logLevel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDoguInterActor_SetLogLevelInAllDogus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogLevelInAllDogus'
type mockDoguInterActor_SetLogLevelInAllDogus_Call struct {
	*mock.Call
}

// SetLogLevelInAllDogus is a helper method to define mock.On call
//   - ctx context.Context
//   - logLevel string
func (_e *mockDoguInterActor_Expecter) SetLogLevelInAllDogus(ctx interface{}, logLevel interface{}) *mockDoguInterActor_SetLogLevelInAllDogus_Call {
	return &mockDoguInterActor_SetLogLevelInAllDogus_Call{Call: _e.mock.On("SetLogLevelInAllDogus", ctx, logLevel)}
}

func (_c *mockDoguInterActor_SetLogLevelInAllDogus_Call) Run(run func(ctx context.Context, logLevel string)) *mockDoguInterActor_SetLogLevelInAllDogus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockDoguInterActor_SetLogLevelInAllDogus_Call) Return(_a0 error) *mockDoguInterActor_SetLogLevelInAllDogus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDoguInterActor_SetLogLevelInAllDogus_Call) RunAndReturn(run func(context.Context, string) error) *mockDoguInterActor_SetLogLevelInAllDogus_Call {
	_c.Call.Return(run)
	return _c
}

// StartAllDogus provides a mock function with given fields: ctx
func (_m *mockDoguInterActor) StartAllDogus(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDoguInterActor_StartAllDogus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartAllDogus'
type mockDoguInterActor_StartAllDogus_Call struct {
	*mock.Call
}

// StartAllDogus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockDoguInterActor_Expecter) StartAllDogus(ctx interface{}) *mockDoguInterActor_StartAllDogus_Call {
	return &mockDoguInterActor_StartAllDogus_Call{Call: _e.mock.On("StartAllDogus", ctx)}
}

func (_c *mockDoguInterActor_StartAllDogus_Call) Run(run func(ctx context.Context)) *mockDoguInterActor_StartAllDogus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockDoguInterActor_StartAllDogus_Call) Return(_a0 error) *mockDoguInterActor_StartAllDogus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDoguInterActor_StartAllDogus_Call) RunAndReturn(run func(context.Context) error) *mockDoguInterActor_StartAllDogus_Call {
	_c.Call.Return(run)
	return _c
}

// StopAllDogus provides a mock function with given fields: ctx
func (_m *mockDoguInterActor) StopAllDogus(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDoguInterActor_StopAllDogus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopAllDogus'
type mockDoguInterActor_StopAllDogus_Call struct {
	*mock.Call
}

// StopAllDogus is a helper method to define mock.On call
//   - ctx context.Context
func (_e *mockDoguInterActor_Expecter) StopAllDogus(ctx interface{}) *mockDoguInterActor_StopAllDogus_Call {
	return &mockDoguInterActor_StopAllDogus_Call{Call: _e.mock.On("StopAllDogus", ctx)}
}

func (_c *mockDoguInterActor_StopAllDogus_Call) Run(run func(ctx context.Context)) *mockDoguInterActor_StopAllDogus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockDoguInterActor_StopAllDogus_Call) Return(_a0 error) *mockDoguInterActor_StopAllDogus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDoguInterActor_StopAllDogus_Call) RunAndReturn(run func(context.Context) error) *mockDoguInterActor_StopAllDogus_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockDoguInterActor interface {
	mock.TestingT
	Cleanup(func())
}

// newMockDoguInterActor creates a new instance of mockDoguInterActor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockDoguInterActor(t mockConstructorTestingTnewMockDoguInterActor) *mockDoguInterActor {
	mock := &mockDoguInterActor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
