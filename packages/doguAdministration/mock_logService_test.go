// Code generated by mockery v2.20.0. DO NOT EDIT.

package doguAdministration

import (
	context "context"

	logging "github.com/cloudogu/k8s-ces-control/packages/logging"
	mock "github.com/stretchr/testify/mock"
)

// mockLogService is an autogenerated mock type for the logService type
type mockLogService struct {
	mock.Mock
}

type mockLogService_Expecter struct {
	mock *mock.Mock
}

func (_m *mockLogService) EXPECT() *mockLogService_Expecter {
	return &mockLogService_Expecter{mock: &_m.Mock}
}

// GetLogLevel provides a mock function with given fields: _a0, _a1
func (_m *mockLogService) GetLogLevel(_a0 context.Context, _a1 string) (logging.LogLevel, error) {
	ret := _m.Called(_a0, _a1)

	var r0 logging.LogLevel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (logging.LogLevel, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) logging.LogLevel); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(logging.LogLevel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockLogService_GetLogLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogLevel'
type mockLogService_GetLogLevel_Call struct {
	*mock.Call
}

// GetLogLevel is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *mockLogService_Expecter) GetLogLevel(_a0 interface{}, _a1 interface{}) *mockLogService_GetLogLevel_Call {
	return &mockLogService_GetLogLevel_Call{Call: _e.mock.On("GetLogLevel", _a0, _a1)}
}

func (_c *mockLogService_GetLogLevel_Call) Run(run func(_a0 context.Context, _a1 string)) *mockLogService_GetLogLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockLogService_GetLogLevel_Call) Return(_a0 logging.LogLevel, _a1 error) *mockLogService_GetLogLevel_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockLogService_GetLogLevel_Call) RunAndReturn(run func(context.Context, string) (logging.LogLevel, error)) *mockLogService_GetLogLevel_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockLogService interface {
	mock.TestingT
	Cleanup(func())
}

// newMockLogService creates a new instance of mockLogService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockLogService(t mockConstructorTestingTnewMockLogService) *mockLogService {
	mock := &mockLogService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
