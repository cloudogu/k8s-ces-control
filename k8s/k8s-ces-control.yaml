apiVersion: v1
kind: Service
metadata:
  name: k8s-ces-control
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-control
spec:
  type: ClusterIP
  ports:
    - name: grpc
      port: 50051
      targetPort: grpc-port
  selector:
    app.kubernetes.io/name: k8s-ces-control
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: k8s-ces-control
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-control
rules:
  - apiGroups:
      - "*"
    resources:
      - "*"
    verbs:
      - "*"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-ces-control
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-control
rules:
  - apiGroups:
      - "*"
    resources:
      - "*"
    verbs:
      - "*"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-ces-control
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-control
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-ces-control
subjects:
  - kind: ServiceAccount
    name: k8s-ces-control
    namespace: '{{ .Namespace }}'
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-ces-control
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-control
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: k8s-ces-control
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-control
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: k8s-ces-control
subjects:
  - kind: ServiceAccount
    name: k8s-ces-control
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-ces-control
  labels:
    app: ces
    app.kubernetes.io/name: k8s-ces-control
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: k8s-ces-control
  template:
    metadata:
      labels:
        app: ces
        app.kubernetes.io/name: k8s-ces-control
    spec:
      containers:
        - name: k8s-ces-control
          image: "cloudogu/k8s-ces-control:0.0.0"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - mountPath: /etc/k8s-ces-control
              name: k8s-ces-control-server-certificate
              readOnly: false
          env:
            - name: LOG_LEVEL
              value: '{{.LOG_LEVEL}}'
            - name: STAGE
              value: '{{.STAGE}}'
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: LOKI_GATEWAY_URL
              value: "{{ .Values.lokiGateway.url }}"
            - name: LOKI_GATEWAY_USERNAME
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.lokiGateway.secretName }}"
                  key: "{{ .Values.lokiGateway.usernameKey }}"
            - name: LOKI_GATEWAY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.lokiGateway.secretName }}"
                  key: "{{ .Values.lokiGateway.passwordKey }}"
          startupProbe:
            exec:
              command: ["/bin/bash", "-c", "/grpc_health_probe -addr localhost:50051 || exit 1"]
            failureThreshold: 60
            periodSeconds: 10
          livenessProbe:
            exec:
              command: ["/bin/bash", "-c", "/grpc_health_probe -addr localhost:50051 || exit 1"]
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command: ["/bin/bash", "-c", "/grpc_health_probe -addr localhost:50051 || exit 1"]
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
            - name: grpc-port
              containerPort: 50051
              protocol: TCP
      serviceAccountName: k8s-ces-control
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
        # this secret is generated by k8s-ces-control during the start-up, the filenames will be those of the secret data map keys
        - name: k8s-ces-control-server-certificate
          secret:
            optional: true
            secretName: k8s-ces-control-server-certificate
