// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: backup.proto

package backup

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BackupManagementClient is the client API for BackupManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackupManagementClient interface {
	// LastSuccessful retrieves information about the last successfully created backup.
	LastSuccessful(ctx context.Context, in *LastSuccessfulBackupRequest, opts ...grpc.CallOption) (*BackupResponse, error)
	// ResticCredValid retrieves information about the validity of the restic credentials from etcd
	ResticCredValid(ctx context.Context, in *ResticCredentialValidRequest, opts ...grpc.CallOption) (*ResticCredentialResponse, error)
}

type backupManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewBackupManagementClient(cc grpc.ClientConnInterface) BackupManagementClient {
	return &backupManagementClient{cc}
}

func (c *backupManagementClient) LastSuccessful(ctx context.Context, in *LastSuccessfulBackupRequest, opts ...grpc.CallOption) (*BackupResponse, error) {
	out := new(BackupResponse)
	err := c.cc.Invoke(ctx, "/backup.BackupManagement/LastSuccessful", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backupManagementClient) ResticCredValid(ctx context.Context, in *ResticCredentialValidRequest, opts ...grpc.CallOption) (*ResticCredentialResponse, error) {
	out := new(ResticCredentialResponse)
	err := c.cc.Invoke(ctx, "/backup.BackupManagement/ResticCredValid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackupManagementServer is the server API for BackupManagement service.
// All implementations must embed UnimplementedBackupManagementServer
// for forward compatibility
type BackupManagementServer interface {
	// LastSuccessful retrieves information about the last successfully created backup.
	LastSuccessful(context.Context, *LastSuccessfulBackupRequest) (*BackupResponse, error)
	// ResticCredValid retrieves information about the validity of the restic credentials from etcd
	ResticCredValid(context.Context, *ResticCredentialValidRequest) (*ResticCredentialResponse, error)
	mustEmbedUnimplementedBackupManagementServer()
}

// UnimplementedBackupManagementServer must be embedded to have forward compatible implementations.
type UnimplementedBackupManagementServer struct {
}

func (UnimplementedBackupManagementServer) LastSuccessful(context.Context, *LastSuccessfulBackupRequest) (*BackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastSuccessful not implemented")
}
func (UnimplementedBackupManagementServer) ResticCredValid(context.Context, *ResticCredentialValidRequest) (*ResticCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResticCredValid not implemented")
}
func (UnimplementedBackupManagementServer) mustEmbedUnimplementedBackupManagementServer() {}

// UnsafeBackupManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackupManagementServer will
// result in compilation errors.
type UnsafeBackupManagementServer interface {
	mustEmbedUnimplementedBackupManagementServer()
}

func RegisterBackupManagementServer(s grpc.ServiceRegistrar, srv BackupManagementServer) {
	s.RegisterService(&BackupManagement_ServiceDesc, srv)
}

func _BackupManagement_LastSuccessful_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastSuccessfulBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupManagementServer).LastSuccessful(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backup.BackupManagement/LastSuccessful",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupManagementServer).LastSuccessful(ctx, req.(*LastSuccessfulBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackupManagement_ResticCredValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResticCredentialValidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackupManagementServer).ResticCredValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backup.BackupManagement/ResticCredValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackupManagementServer).ResticCredValid(ctx, req.(*ResticCredentialValidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackupManagement_ServiceDesc is the grpc.ServiceDesc for BackupManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackupManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backup.BackupManagement",
	HandlerType: (*BackupManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LastSuccessful",
			Handler:    _BackupManagement_LastSuccessful_Handler,
		},
		{
			MethodName: "ResticCredValid",
			Handler:    _BackupManagement_ResticCredValid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backup.proto",
}
