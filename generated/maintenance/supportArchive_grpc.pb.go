// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: supportArchive.proto

package maintenance

import (
	context "context"
	types "github.com/cloudogu/k8s-ces-control/generated/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SupportArchiveClient is the client API for SupportArchive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SupportArchiveClient interface {
	Create(ctx context.Context, in *CreateSupportArchiveRequest, opts ...grpc.CallOption) (SupportArchive_CreateClient, error)
}

type supportArchiveClient struct {
	cc grpc.ClientConnInterface
}

func NewSupportArchiveClient(cc grpc.ClientConnInterface) SupportArchiveClient {
	return &supportArchiveClient{cc}
}

func (c *supportArchiveClient) Create(ctx context.Context, in *CreateSupportArchiveRequest, opts ...grpc.CallOption) (SupportArchive_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &SupportArchive_ServiceDesc.Streams[0], "/maintenance.SupportArchive/Create", opts...)
	if err != nil {
		return nil, err
	}
	x := &supportArchiveCreateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SupportArchive_CreateClient interface {
	Recv() (*types.ChunkedDataResponse, error)
	grpc.ClientStream
}

type supportArchiveCreateClient struct {
	grpc.ClientStream
}

func (x *supportArchiveCreateClient) Recv() (*types.ChunkedDataResponse, error) {
	m := new(types.ChunkedDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SupportArchiveServer is the server API for SupportArchive service.
// All implementations must embed UnimplementedSupportArchiveServer
// for forward compatibility
type SupportArchiveServer interface {
	Create(*CreateSupportArchiveRequest, SupportArchive_CreateServer) error
	mustEmbedUnimplementedSupportArchiveServer()
}

// UnimplementedSupportArchiveServer must be embedded to have forward compatible implementations.
type UnimplementedSupportArchiveServer struct {
}

func (UnimplementedSupportArchiveServer) Create(*CreateSupportArchiveRequest, SupportArchive_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSupportArchiveServer) mustEmbedUnimplementedSupportArchiveServer() {}

// UnsafeSupportArchiveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupportArchiveServer will
// result in compilation errors.
type UnsafeSupportArchiveServer interface {
	mustEmbedUnimplementedSupportArchiveServer()
}

func RegisterSupportArchiveServer(s grpc.ServiceRegistrar, srv SupportArchiveServer) {
	s.RegisterService(&SupportArchive_ServiceDesc, srv)
}

func _SupportArchive_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateSupportArchiveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SupportArchiveServer).Create(m, &supportArchiveCreateServer{stream})
}

type SupportArchive_CreateServer interface {
	Send(*types.ChunkedDataResponse) error
	grpc.ServerStream
}

type supportArchiveCreateServer struct {
	grpc.ServerStream
}

func (x *supportArchiveCreateServer) Send(m *types.ChunkedDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SupportArchive_ServiceDesc is the grpc.ServiceDesc for SupportArchive service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SupportArchive_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "maintenance.SupportArchive",
	HandlerType: (*SupportArchiveServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Create",
			Handler:       _SupportArchive_Create_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "supportArchive.proto",
}
