// Code generated by mockery v2.20.0. DO NOT EDIT.

package main

import (
	apiserverinternalv1alpha1 "k8s.io/client-go/kubernetes/typed/apiserverinternal/v1alpha1"
	appsv1 "k8s.io/client-go/kubernetes/typed/apps/v1"

	appsv1beta1 "k8s.io/client-go/kubernetes/typed/apps/v1beta1"

	authenticationv1 "k8s.io/client-go/kubernetes/typed/authentication/v1"

	authenticationv1alpha1 "k8s.io/client-go/kubernetes/typed/authentication/v1alpha1"

	authenticationv1beta1 "k8s.io/client-go/kubernetes/typed/authentication/v1beta1"

	authorizationv1 "k8s.io/client-go/kubernetes/typed/authorization/v1"

	authorizationv1beta1 "k8s.io/client-go/kubernetes/typed/authorization/v1beta1"

	autoscalingv1 "k8s.io/client-go/kubernetes/typed/autoscaling/v1"

	batchv1 "k8s.io/client-go/kubernetes/typed/batch/v1"

	batchv1beta1 "k8s.io/client-go/kubernetes/typed/batch/v1beta1"

	certificatesv1 "k8s.io/client-go/kubernetes/typed/certificates/v1"

	certificatesv1alpha1 "k8s.io/client-go/kubernetes/typed/certificates/v1alpha1"

	certificatesv1beta1 "k8s.io/client-go/kubernetes/typed/certificates/v1beta1"

	coordinationv1 "k8s.io/client-go/kubernetes/typed/coordination/v1"

	coordinationv1beta1 "k8s.io/client-go/kubernetes/typed/coordination/v1beta1"

	corev1 "k8s.io/client-go/kubernetes/typed/core/v1"

	discovery "k8s.io/client-go/discovery"

	discoveryv1 "k8s.io/client-go/kubernetes/typed/discovery/v1"

	discoveryv1beta1 "k8s.io/client-go/kubernetes/typed/discovery/v1beta1"

	ecoSystem "github.com/cloudogu/k8s-dogu-operator/api/ecoSystem"

	eventsv1 "k8s.io/client-go/kubernetes/typed/events/v1"

	eventsv1beta1 "k8s.io/client-go/kubernetes/typed/events/v1beta1"

	extensionsv1beta1 "k8s.io/client-go/kubernetes/typed/extensions/v1beta1"

	flowcontrolv1alpha1 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1alpha1"

	flowcontrolv1beta1 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1beta1"

	flowcontrolv1beta2 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1beta2"

	mock "github.com/stretchr/testify/mock"

	networkingv1 "k8s.io/client-go/kubernetes/typed/networking/v1"

	networkingv1alpha1 "k8s.io/client-go/kubernetes/typed/networking/v1alpha1"

	networkingv1beta1 "k8s.io/client-go/kubernetes/typed/networking/v1beta1"

	nodev1 "k8s.io/client-go/kubernetes/typed/node/v1"

	nodev1alpha1 "k8s.io/client-go/kubernetes/typed/node/v1alpha1"

	nodev1beta1 "k8s.io/client-go/kubernetes/typed/node/v1beta1"

	policyv1 "k8s.io/client-go/kubernetes/typed/policy/v1"

	policyv1beta1 "k8s.io/client-go/kubernetes/typed/policy/v1beta1"

	rbacv1 "k8s.io/client-go/kubernetes/typed/rbac/v1"

	rbacv1alpha1 "k8s.io/client-go/kubernetes/typed/rbac/v1alpha1"

	rbacv1beta1 "k8s.io/client-go/kubernetes/typed/rbac/v1beta1"

	schedulingv1 "k8s.io/client-go/kubernetes/typed/scheduling/v1"

	schedulingv1alpha1 "k8s.io/client-go/kubernetes/typed/scheduling/v1alpha1"

	schedulingv1beta1 "k8s.io/client-go/kubernetes/typed/scheduling/v1beta1"

	storagev1 "k8s.io/client-go/kubernetes/typed/storage/v1"

	storagev1alpha1 "k8s.io/client-go/kubernetes/typed/storage/v1alpha1"

	storagev1beta1 "k8s.io/client-go/kubernetes/typed/storage/v1beta1"

	v1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1"

	v1alpha1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1alpha1"

	v1alpha2 "k8s.io/client-go/kubernetes/typed/resource/v1alpha2"

	v1beta1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1beta1"

	v1beta2 "k8s.io/client-go/kubernetes/typed/apps/v1beta2"

	v1beta3 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1beta3"

	v2 "k8s.io/client-go/kubernetes/typed/autoscaling/v2"

	v2beta1 "k8s.io/client-go/kubernetes/typed/autoscaling/v2beta1"

	v2beta2 "k8s.io/client-go/kubernetes/typed/autoscaling/v2beta2"
)

// mockClusterClientSet is an autogenerated mock type for the clusterClientSet type
type mockClusterClientSet struct {
	mock.Mock
}

type mockClusterClientSet_Expecter struct {
	mock *mock.Mock
}

func (_m *mockClusterClientSet) EXPECT() *mockClusterClientSet_Expecter {
	return &mockClusterClientSet_Expecter{mock: &_m.Mock}
}

// AdmissionregistrationV1 provides a mock function with given fields:
func (_m *mockClusterClientSet) AdmissionregistrationV1() v1.AdmissionregistrationV1Interface {
	ret := _m.Called()

	var r0 v1.AdmissionregistrationV1Interface
	if rf, ok := ret.Get(0).(func() v1.AdmissionregistrationV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1.AdmissionregistrationV1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_AdmissionregistrationV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdmissionregistrationV1'
type mockClusterClientSet_AdmissionregistrationV1_Call struct {
	*mock.Call
}

// AdmissionregistrationV1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) AdmissionregistrationV1() *mockClusterClientSet_AdmissionregistrationV1_Call {
	return &mockClusterClientSet_AdmissionregistrationV1_Call{Call: _e.mock.On("AdmissionregistrationV1")}
}

func (_c *mockClusterClientSet_AdmissionregistrationV1_Call) Run(run func()) *mockClusterClientSet_AdmissionregistrationV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_AdmissionregistrationV1_Call) Return(_a0 v1.AdmissionregistrationV1Interface) *mockClusterClientSet_AdmissionregistrationV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_AdmissionregistrationV1_Call) RunAndReturn(run func() v1.AdmissionregistrationV1Interface) *mockClusterClientSet_AdmissionregistrationV1_Call {
	_c.Call.Return(run)
	return _c
}

// AdmissionregistrationV1alpha1 provides a mock function with given fields:
func (_m *mockClusterClientSet) AdmissionregistrationV1alpha1() v1alpha1.AdmissionregistrationV1alpha1Interface {
	ret := _m.Called()

	var r0 v1alpha1.AdmissionregistrationV1alpha1Interface
	if rf, ok := ret.Get(0).(func() v1alpha1.AdmissionregistrationV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.AdmissionregistrationV1alpha1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_AdmissionregistrationV1alpha1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdmissionregistrationV1alpha1'
type mockClusterClientSet_AdmissionregistrationV1alpha1_Call struct {
	*mock.Call
}

// AdmissionregistrationV1alpha1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) AdmissionregistrationV1alpha1() *mockClusterClientSet_AdmissionregistrationV1alpha1_Call {
	return &mockClusterClientSet_AdmissionregistrationV1alpha1_Call{Call: _e.mock.On("AdmissionregistrationV1alpha1")}
}

func (_c *mockClusterClientSet_AdmissionregistrationV1alpha1_Call) Run(run func()) *mockClusterClientSet_AdmissionregistrationV1alpha1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_AdmissionregistrationV1alpha1_Call) Return(_a0 v1alpha1.AdmissionregistrationV1alpha1Interface) *mockClusterClientSet_AdmissionregistrationV1alpha1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_AdmissionregistrationV1alpha1_Call) RunAndReturn(run func() v1alpha1.AdmissionregistrationV1alpha1Interface) *mockClusterClientSet_AdmissionregistrationV1alpha1_Call {
	_c.Call.Return(run)
	return _c
}

// AdmissionregistrationV1beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) AdmissionregistrationV1beta1() v1beta1.AdmissionregistrationV1beta1Interface {
	ret := _m.Called()

	var r0 v1beta1.AdmissionregistrationV1beta1Interface
	if rf, ok := ret.Get(0).(func() v1beta1.AdmissionregistrationV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta1.AdmissionregistrationV1beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_AdmissionregistrationV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AdmissionregistrationV1beta1'
type mockClusterClientSet_AdmissionregistrationV1beta1_Call struct {
	*mock.Call
}

// AdmissionregistrationV1beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) AdmissionregistrationV1beta1() *mockClusterClientSet_AdmissionregistrationV1beta1_Call {
	return &mockClusterClientSet_AdmissionregistrationV1beta1_Call{Call: _e.mock.On("AdmissionregistrationV1beta1")}
}

func (_c *mockClusterClientSet_AdmissionregistrationV1beta1_Call) Run(run func()) *mockClusterClientSet_AdmissionregistrationV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_AdmissionregistrationV1beta1_Call) Return(_a0 v1beta1.AdmissionregistrationV1beta1Interface) *mockClusterClientSet_AdmissionregistrationV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_AdmissionregistrationV1beta1_Call) RunAndReturn(run func() v1beta1.AdmissionregistrationV1beta1Interface) *mockClusterClientSet_AdmissionregistrationV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// AppsV1 provides a mock function with given fields:
func (_m *mockClusterClientSet) AppsV1() appsv1.AppsV1Interface {
	ret := _m.Called()

	var r0 appsv1.AppsV1Interface
	if rf, ok := ret.Get(0).(func() appsv1.AppsV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(appsv1.AppsV1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_AppsV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppsV1'
type mockClusterClientSet_AppsV1_Call struct {
	*mock.Call
}

// AppsV1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) AppsV1() *mockClusterClientSet_AppsV1_Call {
	return &mockClusterClientSet_AppsV1_Call{Call: _e.mock.On("AppsV1")}
}

func (_c *mockClusterClientSet_AppsV1_Call) Run(run func()) *mockClusterClientSet_AppsV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_AppsV1_Call) Return(_a0 appsv1.AppsV1Interface) *mockClusterClientSet_AppsV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_AppsV1_Call) RunAndReturn(run func() appsv1.AppsV1Interface) *mockClusterClientSet_AppsV1_Call {
	_c.Call.Return(run)
	return _c
}

// AppsV1beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) AppsV1beta1() appsv1beta1.AppsV1beta1Interface {
	ret := _m.Called()

	var r0 appsv1beta1.AppsV1beta1Interface
	if rf, ok := ret.Get(0).(func() appsv1beta1.AppsV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(appsv1beta1.AppsV1beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_AppsV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppsV1beta1'
type mockClusterClientSet_AppsV1beta1_Call struct {
	*mock.Call
}

// AppsV1beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) AppsV1beta1() *mockClusterClientSet_AppsV1beta1_Call {
	return &mockClusterClientSet_AppsV1beta1_Call{Call: _e.mock.On("AppsV1beta1")}
}

func (_c *mockClusterClientSet_AppsV1beta1_Call) Run(run func()) *mockClusterClientSet_AppsV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_AppsV1beta1_Call) Return(_a0 appsv1beta1.AppsV1beta1Interface) *mockClusterClientSet_AppsV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_AppsV1beta1_Call) RunAndReturn(run func() appsv1beta1.AppsV1beta1Interface) *mockClusterClientSet_AppsV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// AppsV1beta2 provides a mock function with given fields:
func (_m *mockClusterClientSet) AppsV1beta2() v1beta2.AppsV1beta2Interface {
	ret := _m.Called()

	var r0 v1beta2.AppsV1beta2Interface
	if rf, ok := ret.Get(0).(func() v1beta2.AppsV1beta2Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta2.AppsV1beta2Interface)
		}
	}

	return r0
}

// mockClusterClientSet_AppsV1beta2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppsV1beta2'
type mockClusterClientSet_AppsV1beta2_Call struct {
	*mock.Call
}

// AppsV1beta2 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) AppsV1beta2() *mockClusterClientSet_AppsV1beta2_Call {
	return &mockClusterClientSet_AppsV1beta2_Call{Call: _e.mock.On("AppsV1beta2")}
}

func (_c *mockClusterClientSet_AppsV1beta2_Call) Run(run func()) *mockClusterClientSet_AppsV1beta2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_AppsV1beta2_Call) Return(_a0 v1beta2.AppsV1beta2Interface) *mockClusterClientSet_AppsV1beta2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_AppsV1beta2_Call) RunAndReturn(run func() v1beta2.AppsV1beta2Interface) *mockClusterClientSet_AppsV1beta2_Call {
	_c.Call.Return(run)
	return _c
}

// AuthenticationV1 provides a mock function with given fields:
func (_m *mockClusterClientSet) AuthenticationV1() authenticationv1.AuthenticationV1Interface {
	ret := _m.Called()

	var r0 authenticationv1.AuthenticationV1Interface
	if rf, ok := ret.Get(0).(func() authenticationv1.AuthenticationV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authenticationv1.AuthenticationV1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_AuthenticationV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticationV1'
type mockClusterClientSet_AuthenticationV1_Call struct {
	*mock.Call
}

// AuthenticationV1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) AuthenticationV1() *mockClusterClientSet_AuthenticationV1_Call {
	return &mockClusterClientSet_AuthenticationV1_Call{Call: _e.mock.On("AuthenticationV1")}
}

func (_c *mockClusterClientSet_AuthenticationV1_Call) Run(run func()) *mockClusterClientSet_AuthenticationV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_AuthenticationV1_Call) Return(_a0 authenticationv1.AuthenticationV1Interface) *mockClusterClientSet_AuthenticationV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_AuthenticationV1_Call) RunAndReturn(run func() authenticationv1.AuthenticationV1Interface) *mockClusterClientSet_AuthenticationV1_Call {
	_c.Call.Return(run)
	return _c
}

// AuthenticationV1alpha1 provides a mock function with given fields:
func (_m *mockClusterClientSet) AuthenticationV1alpha1() authenticationv1alpha1.AuthenticationV1alpha1Interface {
	ret := _m.Called()

	var r0 authenticationv1alpha1.AuthenticationV1alpha1Interface
	if rf, ok := ret.Get(0).(func() authenticationv1alpha1.AuthenticationV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authenticationv1alpha1.AuthenticationV1alpha1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_AuthenticationV1alpha1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticationV1alpha1'
type mockClusterClientSet_AuthenticationV1alpha1_Call struct {
	*mock.Call
}

// AuthenticationV1alpha1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) AuthenticationV1alpha1() *mockClusterClientSet_AuthenticationV1alpha1_Call {
	return &mockClusterClientSet_AuthenticationV1alpha1_Call{Call: _e.mock.On("AuthenticationV1alpha1")}
}

func (_c *mockClusterClientSet_AuthenticationV1alpha1_Call) Run(run func()) *mockClusterClientSet_AuthenticationV1alpha1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_AuthenticationV1alpha1_Call) Return(_a0 authenticationv1alpha1.AuthenticationV1alpha1Interface) *mockClusterClientSet_AuthenticationV1alpha1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_AuthenticationV1alpha1_Call) RunAndReturn(run func() authenticationv1alpha1.AuthenticationV1alpha1Interface) *mockClusterClientSet_AuthenticationV1alpha1_Call {
	_c.Call.Return(run)
	return _c
}

// AuthenticationV1beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) AuthenticationV1beta1() authenticationv1beta1.AuthenticationV1beta1Interface {
	ret := _m.Called()

	var r0 authenticationv1beta1.AuthenticationV1beta1Interface
	if rf, ok := ret.Get(0).(func() authenticationv1beta1.AuthenticationV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authenticationv1beta1.AuthenticationV1beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_AuthenticationV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticationV1beta1'
type mockClusterClientSet_AuthenticationV1beta1_Call struct {
	*mock.Call
}

// AuthenticationV1beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) AuthenticationV1beta1() *mockClusterClientSet_AuthenticationV1beta1_Call {
	return &mockClusterClientSet_AuthenticationV1beta1_Call{Call: _e.mock.On("AuthenticationV1beta1")}
}

func (_c *mockClusterClientSet_AuthenticationV1beta1_Call) Run(run func()) *mockClusterClientSet_AuthenticationV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_AuthenticationV1beta1_Call) Return(_a0 authenticationv1beta1.AuthenticationV1beta1Interface) *mockClusterClientSet_AuthenticationV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_AuthenticationV1beta1_Call) RunAndReturn(run func() authenticationv1beta1.AuthenticationV1beta1Interface) *mockClusterClientSet_AuthenticationV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// AuthorizationV1 provides a mock function with given fields:
func (_m *mockClusterClientSet) AuthorizationV1() authorizationv1.AuthorizationV1Interface {
	ret := _m.Called()

	var r0 authorizationv1.AuthorizationV1Interface
	if rf, ok := ret.Get(0).(func() authorizationv1.AuthorizationV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authorizationv1.AuthorizationV1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_AuthorizationV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthorizationV1'
type mockClusterClientSet_AuthorizationV1_Call struct {
	*mock.Call
}

// AuthorizationV1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) AuthorizationV1() *mockClusterClientSet_AuthorizationV1_Call {
	return &mockClusterClientSet_AuthorizationV1_Call{Call: _e.mock.On("AuthorizationV1")}
}

func (_c *mockClusterClientSet_AuthorizationV1_Call) Run(run func()) *mockClusterClientSet_AuthorizationV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_AuthorizationV1_Call) Return(_a0 authorizationv1.AuthorizationV1Interface) *mockClusterClientSet_AuthorizationV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_AuthorizationV1_Call) RunAndReturn(run func() authorizationv1.AuthorizationV1Interface) *mockClusterClientSet_AuthorizationV1_Call {
	_c.Call.Return(run)
	return _c
}

// AuthorizationV1beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) AuthorizationV1beta1() authorizationv1beta1.AuthorizationV1beta1Interface {
	ret := _m.Called()

	var r0 authorizationv1beta1.AuthorizationV1beta1Interface
	if rf, ok := ret.Get(0).(func() authorizationv1beta1.AuthorizationV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authorizationv1beta1.AuthorizationV1beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_AuthorizationV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthorizationV1beta1'
type mockClusterClientSet_AuthorizationV1beta1_Call struct {
	*mock.Call
}

// AuthorizationV1beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) AuthorizationV1beta1() *mockClusterClientSet_AuthorizationV1beta1_Call {
	return &mockClusterClientSet_AuthorizationV1beta1_Call{Call: _e.mock.On("AuthorizationV1beta1")}
}

func (_c *mockClusterClientSet_AuthorizationV1beta1_Call) Run(run func()) *mockClusterClientSet_AuthorizationV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_AuthorizationV1beta1_Call) Return(_a0 authorizationv1beta1.AuthorizationV1beta1Interface) *mockClusterClientSet_AuthorizationV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_AuthorizationV1beta1_Call) RunAndReturn(run func() authorizationv1beta1.AuthorizationV1beta1Interface) *mockClusterClientSet_AuthorizationV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// AutoscalingV1 provides a mock function with given fields:
func (_m *mockClusterClientSet) AutoscalingV1() autoscalingv1.AutoscalingV1Interface {
	ret := _m.Called()

	var r0 autoscalingv1.AutoscalingV1Interface
	if rf, ok := ret.Get(0).(func() autoscalingv1.AutoscalingV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(autoscalingv1.AutoscalingV1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_AutoscalingV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AutoscalingV1'
type mockClusterClientSet_AutoscalingV1_Call struct {
	*mock.Call
}

// AutoscalingV1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) AutoscalingV1() *mockClusterClientSet_AutoscalingV1_Call {
	return &mockClusterClientSet_AutoscalingV1_Call{Call: _e.mock.On("AutoscalingV1")}
}

func (_c *mockClusterClientSet_AutoscalingV1_Call) Run(run func()) *mockClusterClientSet_AutoscalingV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_AutoscalingV1_Call) Return(_a0 autoscalingv1.AutoscalingV1Interface) *mockClusterClientSet_AutoscalingV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_AutoscalingV1_Call) RunAndReturn(run func() autoscalingv1.AutoscalingV1Interface) *mockClusterClientSet_AutoscalingV1_Call {
	_c.Call.Return(run)
	return _c
}

// AutoscalingV2 provides a mock function with given fields:
func (_m *mockClusterClientSet) AutoscalingV2() v2.AutoscalingV2Interface {
	ret := _m.Called()

	var r0 v2.AutoscalingV2Interface
	if rf, ok := ret.Get(0).(func() v2.AutoscalingV2Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2.AutoscalingV2Interface)
		}
	}

	return r0
}

// mockClusterClientSet_AutoscalingV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AutoscalingV2'
type mockClusterClientSet_AutoscalingV2_Call struct {
	*mock.Call
}

// AutoscalingV2 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) AutoscalingV2() *mockClusterClientSet_AutoscalingV2_Call {
	return &mockClusterClientSet_AutoscalingV2_Call{Call: _e.mock.On("AutoscalingV2")}
}

func (_c *mockClusterClientSet_AutoscalingV2_Call) Run(run func()) *mockClusterClientSet_AutoscalingV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_AutoscalingV2_Call) Return(_a0 v2.AutoscalingV2Interface) *mockClusterClientSet_AutoscalingV2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_AutoscalingV2_Call) RunAndReturn(run func() v2.AutoscalingV2Interface) *mockClusterClientSet_AutoscalingV2_Call {
	_c.Call.Return(run)
	return _c
}

// AutoscalingV2beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) AutoscalingV2beta1() v2beta1.AutoscalingV2beta1Interface {
	ret := _m.Called()

	var r0 v2beta1.AutoscalingV2beta1Interface
	if rf, ok := ret.Get(0).(func() v2beta1.AutoscalingV2beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2beta1.AutoscalingV2beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_AutoscalingV2beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AutoscalingV2beta1'
type mockClusterClientSet_AutoscalingV2beta1_Call struct {
	*mock.Call
}

// AutoscalingV2beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) AutoscalingV2beta1() *mockClusterClientSet_AutoscalingV2beta1_Call {
	return &mockClusterClientSet_AutoscalingV2beta1_Call{Call: _e.mock.On("AutoscalingV2beta1")}
}

func (_c *mockClusterClientSet_AutoscalingV2beta1_Call) Run(run func()) *mockClusterClientSet_AutoscalingV2beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_AutoscalingV2beta1_Call) Return(_a0 v2beta1.AutoscalingV2beta1Interface) *mockClusterClientSet_AutoscalingV2beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_AutoscalingV2beta1_Call) RunAndReturn(run func() v2beta1.AutoscalingV2beta1Interface) *mockClusterClientSet_AutoscalingV2beta1_Call {
	_c.Call.Return(run)
	return _c
}

// AutoscalingV2beta2 provides a mock function with given fields:
func (_m *mockClusterClientSet) AutoscalingV2beta2() v2beta2.AutoscalingV2beta2Interface {
	ret := _m.Called()

	var r0 v2beta2.AutoscalingV2beta2Interface
	if rf, ok := ret.Get(0).(func() v2beta2.AutoscalingV2beta2Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2beta2.AutoscalingV2beta2Interface)
		}
	}

	return r0
}

// mockClusterClientSet_AutoscalingV2beta2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AutoscalingV2beta2'
type mockClusterClientSet_AutoscalingV2beta2_Call struct {
	*mock.Call
}

// AutoscalingV2beta2 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) AutoscalingV2beta2() *mockClusterClientSet_AutoscalingV2beta2_Call {
	return &mockClusterClientSet_AutoscalingV2beta2_Call{Call: _e.mock.On("AutoscalingV2beta2")}
}

func (_c *mockClusterClientSet_AutoscalingV2beta2_Call) Run(run func()) *mockClusterClientSet_AutoscalingV2beta2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_AutoscalingV2beta2_Call) Return(_a0 v2beta2.AutoscalingV2beta2Interface) *mockClusterClientSet_AutoscalingV2beta2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_AutoscalingV2beta2_Call) RunAndReturn(run func() v2beta2.AutoscalingV2beta2Interface) *mockClusterClientSet_AutoscalingV2beta2_Call {
	_c.Call.Return(run)
	return _c
}

// BatchV1 provides a mock function with given fields:
func (_m *mockClusterClientSet) BatchV1() batchv1.BatchV1Interface {
	ret := _m.Called()

	var r0 batchv1.BatchV1Interface
	if rf, ok := ret.Get(0).(func() batchv1.BatchV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(batchv1.BatchV1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_BatchV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchV1'
type mockClusterClientSet_BatchV1_Call struct {
	*mock.Call
}

// BatchV1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) BatchV1() *mockClusterClientSet_BatchV1_Call {
	return &mockClusterClientSet_BatchV1_Call{Call: _e.mock.On("BatchV1")}
}

func (_c *mockClusterClientSet_BatchV1_Call) Run(run func()) *mockClusterClientSet_BatchV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_BatchV1_Call) Return(_a0 batchv1.BatchV1Interface) *mockClusterClientSet_BatchV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_BatchV1_Call) RunAndReturn(run func() batchv1.BatchV1Interface) *mockClusterClientSet_BatchV1_Call {
	_c.Call.Return(run)
	return _c
}

// BatchV1beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) BatchV1beta1() batchv1beta1.BatchV1beta1Interface {
	ret := _m.Called()

	var r0 batchv1beta1.BatchV1beta1Interface
	if rf, ok := ret.Get(0).(func() batchv1beta1.BatchV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(batchv1beta1.BatchV1beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_BatchV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchV1beta1'
type mockClusterClientSet_BatchV1beta1_Call struct {
	*mock.Call
}

// BatchV1beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) BatchV1beta1() *mockClusterClientSet_BatchV1beta1_Call {
	return &mockClusterClientSet_BatchV1beta1_Call{Call: _e.mock.On("BatchV1beta1")}
}

func (_c *mockClusterClientSet_BatchV1beta1_Call) Run(run func()) *mockClusterClientSet_BatchV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_BatchV1beta1_Call) Return(_a0 batchv1beta1.BatchV1beta1Interface) *mockClusterClientSet_BatchV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_BatchV1beta1_Call) RunAndReturn(run func() batchv1beta1.BatchV1beta1Interface) *mockClusterClientSet_BatchV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// CertificatesV1 provides a mock function with given fields:
func (_m *mockClusterClientSet) CertificatesV1() certificatesv1.CertificatesV1Interface {
	ret := _m.Called()

	var r0 certificatesv1.CertificatesV1Interface
	if rf, ok := ret.Get(0).(func() certificatesv1.CertificatesV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificatesv1.CertificatesV1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_CertificatesV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CertificatesV1'
type mockClusterClientSet_CertificatesV1_Call struct {
	*mock.Call
}

// CertificatesV1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) CertificatesV1() *mockClusterClientSet_CertificatesV1_Call {
	return &mockClusterClientSet_CertificatesV1_Call{Call: _e.mock.On("CertificatesV1")}
}

func (_c *mockClusterClientSet_CertificatesV1_Call) Run(run func()) *mockClusterClientSet_CertificatesV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_CertificatesV1_Call) Return(_a0 certificatesv1.CertificatesV1Interface) *mockClusterClientSet_CertificatesV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_CertificatesV1_Call) RunAndReturn(run func() certificatesv1.CertificatesV1Interface) *mockClusterClientSet_CertificatesV1_Call {
	_c.Call.Return(run)
	return _c
}

// CertificatesV1alpha1 provides a mock function with given fields:
func (_m *mockClusterClientSet) CertificatesV1alpha1() certificatesv1alpha1.CertificatesV1alpha1Interface {
	ret := _m.Called()

	var r0 certificatesv1alpha1.CertificatesV1alpha1Interface
	if rf, ok := ret.Get(0).(func() certificatesv1alpha1.CertificatesV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificatesv1alpha1.CertificatesV1alpha1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_CertificatesV1alpha1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CertificatesV1alpha1'
type mockClusterClientSet_CertificatesV1alpha1_Call struct {
	*mock.Call
}

// CertificatesV1alpha1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) CertificatesV1alpha1() *mockClusterClientSet_CertificatesV1alpha1_Call {
	return &mockClusterClientSet_CertificatesV1alpha1_Call{Call: _e.mock.On("CertificatesV1alpha1")}
}

func (_c *mockClusterClientSet_CertificatesV1alpha1_Call) Run(run func()) *mockClusterClientSet_CertificatesV1alpha1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_CertificatesV1alpha1_Call) Return(_a0 certificatesv1alpha1.CertificatesV1alpha1Interface) *mockClusterClientSet_CertificatesV1alpha1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_CertificatesV1alpha1_Call) RunAndReturn(run func() certificatesv1alpha1.CertificatesV1alpha1Interface) *mockClusterClientSet_CertificatesV1alpha1_Call {
	_c.Call.Return(run)
	return _c
}

// CertificatesV1beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) CertificatesV1beta1() certificatesv1beta1.CertificatesV1beta1Interface {
	ret := _m.Called()

	var r0 certificatesv1beta1.CertificatesV1beta1Interface
	if rf, ok := ret.Get(0).(func() certificatesv1beta1.CertificatesV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(certificatesv1beta1.CertificatesV1beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_CertificatesV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CertificatesV1beta1'
type mockClusterClientSet_CertificatesV1beta1_Call struct {
	*mock.Call
}

// CertificatesV1beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) CertificatesV1beta1() *mockClusterClientSet_CertificatesV1beta1_Call {
	return &mockClusterClientSet_CertificatesV1beta1_Call{Call: _e.mock.On("CertificatesV1beta1")}
}

func (_c *mockClusterClientSet_CertificatesV1beta1_Call) Run(run func()) *mockClusterClientSet_CertificatesV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_CertificatesV1beta1_Call) Return(_a0 certificatesv1beta1.CertificatesV1beta1Interface) *mockClusterClientSet_CertificatesV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_CertificatesV1beta1_Call) RunAndReturn(run func() certificatesv1beta1.CertificatesV1beta1Interface) *mockClusterClientSet_CertificatesV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// CoordinationV1 provides a mock function with given fields:
func (_m *mockClusterClientSet) CoordinationV1() coordinationv1.CoordinationV1Interface {
	ret := _m.Called()

	var r0 coordinationv1.CoordinationV1Interface
	if rf, ok := ret.Get(0).(func() coordinationv1.CoordinationV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(coordinationv1.CoordinationV1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_CoordinationV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CoordinationV1'
type mockClusterClientSet_CoordinationV1_Call struct {
	*mock.Call
}

// CoordinationV1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) CoordinationV1() *mockClusterClientSet_CoordinationV1_Call {
	return &mockClusterClientSet_CoordinationV1_Call{Call: _e.mock.On("CoordinationV1")}
}

func (_c *mockClusterClientSet_CoordinationV1_Call) Run(run func()) *mockClusterClientSet_CoordinationV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_CoordinationV1_Call) Return(_a0 coordinationv1.CoordinationV1Interface) *mockClusterClientSet_CoordinationV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_CoordinationV1_Call) RunAndReturn(run func() coordinationv1.CoordinationV1Interface) *mockClusterClientSet_CoordinationV1_Call {
	_c.Call.Return(run)
	return _c
}

// CoordinationV1beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) CoordinationV1beta1() coordinationv1beta1.CoordinationV1beta1Interface {
	ret := _m.Called()

	var r0 coordinationv1beta1.CoordinationV1beta1Interface
	if rf, ok := ret.Get(0).(func() coordinationv1beta1.CoordinationV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(coordinationv1beta1.CoordinationV1beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_CoordinationV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CoordinationV1beta1'
type mockClusterClientSet_CoordinationV1beta1_Call struct {
	*mock.Call
}

// CoordinationV1beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) CoordinationV1beta1() *mockClusterClientSet_CoordinationV1beta1_Call {
	return &mockClusterClientSet_CoordinationV1beta1_Call{Call: _e.mock.On("CoordinationV1beta1")}
}

func (_c *mockClusterClientSet_CoordinationV1beta1_Call) Run(run func()) *mockClusterClientSet_CoordinationV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_CoordinationV1beta1_Call) Return(_a0 coordinationv1beta1.CoordinationV1beta1Interface) *mockClusterClientSet_CoordinationV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_CoordinationV1beta1_Call) RunAndReturn(run func() coordinationv1beta1.CoordinationV1beta1Interface) *mockClusterClientSet_CoordinationV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// CoreV1 provides a mock function with given fields:
func (_m *mockClusterClientSet) CoreV1() corev1.CoreV1Interface {
	ret := _m.Called()

	var r0 corev1.CoreV1Interface
	if rf, ok := ret.Get(0).(func() corev1.CoreV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corev1.CoreV1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_CoreV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CoreV1'
type mockClusterClientSet_CoreV1_Call struct {
	*mock.Call
}

// CoreV1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) CoreV1() *mockClusterClientSet_CoreV1_Call {
	return &mockClusterClientSet_CoreV1_Call{Call: _e.mock.On("CoreV1")}
}

func (_c *mockClusterClientSet_CoreV1_Call) Run(run func()) *mockClusterClientSet_CoreV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_CoreV1_Call) Return(_a0 corev1.CoreV1Interface) *mockClusterClientSet_CoreV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_CoreV1_Call) RunAndReturn(run func() corev1.CoreV1Interface) *mockClusterClientSet_CoreV1_Call {
	_c.Call.Return(run)
	return _c
}

// Discovery provides a mock function with given fields:
func (_m *mockClusterClientSet) Discovery() discovery.DiscoveryInterface {
	ret := _m.Called()

	var r0 discovery.DiscoveryInterface
	if rf, ok := ret.Get(0).(func() discovery.DiscoveryInterface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discovery.DiscoveryInterface)
		}
	}

	return r0
}

// mockClusterClientSet_Discovery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Discovery'
type mockClusterClientSet_Discovery_Call struct {
	*mock.Call
}

// Discovery is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) Discovery() *mockClusterClientSet_Discovery_Call {
	return &mockClusterClientSet_Discovery_Call{Call: _e.mock.On("Discovery")}
}

func (_c *mockClusterClientSet_Discovery_Call) Run(run func()) *mockClusterClientSet_Discovery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_Discovery_Call) Return(_a0 discovery.DiscoveryInterface) *mockClusterClientSet_Discovery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_Discovery_Call) RunAndReturn(run func() discovery.DiscoveryInterface) *mockClusterClientSet_Discovery_Call {
	_c.Call.Return(run)
	return _c
}

// DiscoveryV1 provides a mock function with given fields:
func (_m *mockClusterClientSet) DiscoveryV1() discoveryv1.DiscoveryV1Interface {
	ret := _m.Called()

	var r0 discoveryv1.DiscoveryV1Interface
	if rf, ok := ret.Get(0).(func() discoveryv1.DiscoveryV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discoveryv1.DiscoveryV1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_DiscoveryV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiscoveryV1'
type mockClusterClientSet_DiscoveryV1_Call struct {
	*mock.Call
}

// DiscoveryV1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) DiscoveryV1() *mockClusterClientSet_DiscoveryV1_Call {
	return &mockClusterClientSet_DiscoveryV1_Call{Call: _e.mock.On("DiscoveryV1")}
}

func (_c *mockClusterClientSet_DiscoveryV1_Call) Run(run func()) *mockClusterClientSet_DiscoveryV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_DiscoveryV1_Call) Return(_a0 discoveryv1.DiscoveryV1Interface) *mockClusterClientSet_DiscoveryV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_DiscoveryV1_Call) RunAndReturn(run func() discoveryv1.DiscoveryV1Interface) *mockClusterClientSet_DiscoveryV1_Call {
	_c.Call.Return(run)
	return _c
}

// DiscoveryV1beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) DiscoveryV1beta1() discoveryv1beta1.DiscoveryV1beta1Interface {
	ret := _m.Called()

	var r0 discoveryv1beta1.DiscoveryV1beta1Interface
	if rf, ok := ret.Get(0).(func() discoveryv1beta1.DiscoveryV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(discoveryv1beta1.DiscoveryV1beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_DiscoveryV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiscoveryV1beta1'
type mockClusterClientSet_DiscoveryV1beta1_Call struct {
	*mock.Call
}

// DiscoveryV1beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) DiscoveryV1beta1() *mockClusterClientSet_DiscoveryV1beta1_Call {
	return &mockClusterClientSet_DiscoveryV1beta1_Call{Call: _e.mock.On("DiscoveryV1beta1")}
}

func (_c *mockClusterClientSet_DiscoveryV1beta1_Call) Run(run func()) *mockClusterClientSet_DiscoveryV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_DiscoveryV1beta1_Call) Return(_a0 discoveryv1beta1.DiscoveryV1beta1Interface) *mockClusterClientSet_DiscoveryV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_DiscoveryV1beta1_Call) RunAndReturn(run func() discoveryv1beta1.DiscoveryV1beta1Interface) *mockClusterClientSet_DiscoveryV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// Dogus provides a mock function with given fields: namespace
func (_m *mockClusterClientSet) Dogus(namespace string) ecoSystem.DoguInterface {
	ret := _m.Called(namespace)

	var r0 ecoSystem.DoguInterface
	if rf, ok := ret.Get(0).(func(string) ecoSystem.DoguInterface); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ecoSystem.DoguInterface)
		}
	}

	return r0
}

// mockClusterClientSet_Dogus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dogus'
type mockClusterClientSet_Dogus_Call struct {
	*mock.Call
}

// Dogus is a helper method to define mock.On call
//   - namespace string
func (_e *mockClusterClientSet_Expecter) Dogus(namespace interface{}) *mockClusterClientSet_Dogus_Call {
	return &mockClusterClientSet_Dogus_Call{Call: _e.mock.On("Dogus", namespace)}
}

func (_c *mockClusterClientSet_Dogus_Call) Run(run func(namespace string)) *mockClusterClientSet_Dogus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockClusterClientSet_Dogus_Call) Return(_a0 ecoSystem.DoguInterface) *mockClusterClientSet_Dogus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_Dogus_Call) RunAndReturn(run func(string) ecoSystem.DoguInterface) *mockClusterClientSet_Dogus_Call {
	_c.Call.Return(run)
	return _c
}

// EventsV1 provides a mock function with given fields:
func (_m *mockClusterClientSet) EventsV1() eventsv1.EventsV1Interface {
	ret := _m.Called()

	var r0 eventsv1.EventsV1Interface
	if rf, ok := ret.Get(0).(func() eventsv1.EventsV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eventsv1.EventsV1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_EventsV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventsV1'
type mockClusterClientSet_EventsV1_Call struct {
	*mock.Call
}

// EventsV1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) EventsV1() *mockClusterClientSet_EventsV1_Call {
	return &mockClusterClientSet_EventsV1_Call{Call: _e.mock.On("EventsV1")}
}

func (_c *mockClusterClientSet_EventsV1_Call) Run(run func()) *mockClusterClientSet_EventsV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_EventsV1_Call) Return(_a0 eventsv1.EventsV1Interface) *mockClusterClientSet_EventsV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_EventsV1_Call) RunAndReturn(run func() eventsv1.EventsV1Interface) *mockClusterClientSet_EventsV1_Call {
	_c.Call.Return(run)
	return _c
}

// EventsV1beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) EventsV1beta1() eventsv1beta1.EventsV1beta1Interface {
	ret := _m.Called()

	var r0 eventsv1beta1.EventsV1beta1Interface
	if rf, ok := ret.Get(0).(func() eventsv1beta1.EventsV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(eventsv1beta1.EventsV1beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_EventsV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventsV1beta1'
type mockClusterClientSet_EventsV1beta1_Call struct {
	*mock.Call
}

// EventsV1beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) EventsV1beta1() *mockClusterClientSet_EventsV1beta1_Call {
	return &mockClusterClientSet_EventsV1beta1_Call{Call: _e.mock.On("EventsV1beta1")}
}

func (_c *mockClusterClientSet_EventsV1beta1_Call) Run(run func()) *mockClusterClientSet_EventsV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_EventsV1beta1_Call) Return(_a0 eventsv1beta1.EventsV1beta1Interface) *mockClusterClientSet_EventsV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_EventsV1beta1_Call) RunAndReturn(run func() eventsv1beta1.EventsV1beta1Interface) *mockClusterClientSet_EventsV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// ExtensionsV1beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) ExtensionsV1beta1() extensionsv1beta1.ExtensionsV1beta1Interface {
	ret := _m.Called()

	var r0 extensionsv1beta1.ExtensionsV1beta1Interface
	if rf, ok := ret.Get(0).(func() extensionsv1beta1.ExtensionsV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(extensionsv1beta1.ExtensionsV1beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_ExtensionsV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExtensionsV1beta1'
type mockClusterClientSet_ExtensionsV1beta1_Call struct {
	*mock.Call
}

// ExtensionsV1beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) ExtensionsV1beta1() *mockClusterClientSet_ExtensionsV1beta1_Call {
	return &mockClusterClientSet_ExtensionsV1beta1_Call{Call: _e.mock.On("ExtensionsV1beta1")}
}

func (_c *mockClusterClientSet_ExtensionsV1beta1_Call) Run(run func()) *mockClusterClientSet_ExtensionsV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_ExtensionsV1beta1_Call) Return(_a0 extensionsv1beta1.ExtensionsV1beta1Interface) *mockClusterClientSet_ExtensionsV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_ExtensionsV1beta1_Call) RunAndReturn(run func() extensionsv1beta1.ExtensionsV1beta1Interface) *mockClusterClientSet_ExtensionsV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// FlowcontrolV1alpha1 provides a mock function with given fields:
func (_m *mockClusterClientSet) FlowcontrolV1alpha1() flowcontrolv1alpha1.FlowcontrolV1alpha1Interface {
	ret := _m.Called()

	var r0 flowcontrolv1alpha1.FlowcontrolV1alpha1Interface
	if rf, ok := ret.Get(0).(func() flowcontrolv1alpha1.FlowcontrolV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flowcontrolv1alpha1.FlowcontrolV1alpha1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_FlowcontrolV1alpha1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlowcontrolV1alpha1'
type mockClusterClientSet_FlowcontrolV1alpha1_Call struct {
	*mock.Call
}

// FlowcontrolV1alpha1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) FlowcontrolV1alpha1() *mockClusterClientSet_FlowcontrolV1alpha1_Call {
	return &mockClusterClientSet_FlowcontrolV1alpha1_Call{Call: _e.mock.On("FlowcontrolV1alpha1")}
}

func (_c *mockClusterClientSet_FlowcontrolV1alpha1_Call) Run(run func()) *mockClusterClientSet_FlowcontrolV1alpha1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_FlowcontrolV1alpha1_Call) Return(_a0 flowcontrolv1alpha1.FlowcontrolV1alpha1Interface) *mockClusterClientSet_FlowcontrolV1alpha1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_FlowcontrolV1alpha1_Call) RunAndReturn(run func() flowcontrolv1alpha1.FlowcontrolV1alpha1Interface) *mockClusterClientSet_FlowcontrolV1alpha1_Call {
	_c.Call.Return(run)
	return _c
}

// FlowcontrolV1beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) FlowcontrolV1beta1() flowcontrolv1beta1.FlowcontrolV1beta1Interface {
	ret := _m.Called()

	var r0 flowcontrolv1beta1.FlowcontrolV1beta1Interface
	if rf, ok := ret.Get(0).(func() flowcontrolv1beta1.FlowcontrolV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flowcontrolv1beta1.FlowcontrolV1beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_FlowcontrolV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlowcontrolV1beta1'
type mockClusterClientSet_FlowcontrolV1beta1_Call struct {
	*mock.Call
}

// FlowcontrolV1beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) FlowcontrolV1beta1() *mockClusterClientSet_FlowcontrolV1beta1_Call {
	return &mockClusterClientSet_FlowcontrolV1beta1_Call{Call: _e.mock.On("FlowcontrolV1beta1")}
}

func (_c *mockClusterClientSet_FlowcontrolV1beta1_Call) Run(run func()) *mockClusterClientSet_FlowcontrolV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_FlowcontrolV1beta1_Call) Return(_a0 flowcontrolv1beta1.FlowcontrolV1beta1Interface) *mockClusterClientSet_FlowcontrolV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_FlowcontrolV1beta1_Call) RunAndReturn(run func() flowcontrolv1beta1.FlowcontrolV1beta1Interface) *mockClusterClientSet_FlowcontrolV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// FlowcontrolV1beta2 provides a mock function with given fields:
func (_m *mockClusterClientSet) FlowcontrolV1beta2() flowcontrolv1beta2.FlowcontrolV1beta2Interface {
	ret := _m.Called()

	var r0 flowcontrolv1beta2.FlowcontrolV1beta2Interface
	if rf, ok := ret.Get(0).(func() flowcontrolv1beta2.FlowcontrolV1beta2Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flowcontrolv1beta2.FlowcontrolV1beta2Interface)
		}
	}

	return r0
}

// mockClusterClientSet_FlowcontrolV1beta2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlowcontrolV1beta2'
type mockClusterClientSet_FlowcontrolV1beta2_Call struct {
	*mock.Call
}

// FlowcontrolV1beta2 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) FlowcontrolV1beta2() *mockClusterClientSet_FlowcontrolV1beta2_Call {
	return &mockClusterClientSet_FlowcontrolV1beta2_Call{Call: _e.mock.On("FlowcontrolV1beta2")}
}

func (_c *mockClusterClientSet_FlowcontrolV1beta2_Call) Run(run func()) *mockClusterClientSet_FlowcontrolV1beta2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_FlowcontrolV1beta2_Call) Return(_a0 flowcontrolv1beta2.FlowcontrolV1beta2Interface) *mockClusterClientSet_FlowcontrolV1beta2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_FlowcontrolV1beta2_Call) RunAndReturn(run func() flowcontrolv1beta2.FlowcontrolV1beta2Interface) *mockClusterClientSet_FlowcontrolV1beta2_Call {
	_c.Call.Return(run)
	return _c
}

// FlowcontrolV1beta3 provides a mock function with given fields:
func (_m *mockClusterClientSet) FlowcontrolV1beta3() v1beta3.FlowcontrolV1beta3Interface {
	ret := _m.Called()

	var r0 v1beta3.FlowcontrolV1beta3Interface
	if rf, ok := ret.Get(0).(func() v1beta3.FlowcontrolV1beta3Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1beta3.FlowcontrolV1beta3Interface)
		}
	}

	return r0
}

// mockClusterClientSet_FlowcontrolV1beta3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlowcontrolV1beta3'
type mockClusterClientSet_FlowcontrolV1beta3_Call struct {
	*mock.Call
}

// FlowcontrolV1beta3 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) FlowcontrolV1beta3() *mockClusterClientSet_FlowcontrolV1beta3_Call {
	return &mockClusterClientSet_FlowcontrolV1beta3_Call{Call: _e.mock.On("FlowcontrolV1beta3")}
}

func (_c *mockClusterClientSet_FlowcontrolV1beta3_Call) Run(run func()) *mockClusterClientSet_FlowcontrolV1beta3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_FlowcontrolV1beta3_Call) Return(_a0 v1beta3.FlowcontrolV1beta3Interface) *mockClusterClientSet_FlowcontrolV1beta3_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_FlowcontrolV1beta3_Call) RunAndReturn(run func() v1beta3.FlowcontrolV1beta3Interface) *mockClusterClientSet_FlowcontrolV1beta3_Call {
	_c.Call.Return(run)
	return _c
}

// InternalV1alpha1 provides a mock function with given fields:
func (_m *mockClusterClientSet) InternalV1alpha1() apiserverinternalv1alpha1.InternalV1alpha1Interface {
	ret := _m.Called()

	var r0 apiserverinternalv1alpha1.InternalV1alpha1Interface
	if rf, ok := ret.Get(0).(func() apiserverinternalv1alpha1.InternalV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apiserverinternalv1alpha1.InternalV1alpha1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_InternalV1alpha1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InternalV1alpha1'
type mockClusterClientSet_InternalV1alpha1_Call struct {
	*mock.Call
}

// InternalV1alpha1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) InternalV1alpha1() *mockClusterClientSet_InternalV1alpha1_Call {
	return &mockClusterClientSet_InternalV1alpha1_Call{Call: _e.mock.On("InternalV1alpha1")}
}

func (_c *mockClusterClientSet_InternalV1alpha1_Call) Run(run func()) *mockClusterClientSet_InternalV1alpha1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_InternalV1alpha1_Call) Return(_a0 apiserverinternalv1alpha1.InternalV1alpha1Interface) *mockClusterClientSet_InternalV1alpha1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_InternalV1alpha1_Call) RunAndReturn(run func() apiserverinternalv1alpha1.InternalV1alpha1Interface) *mockClusterClientSet_InternalV1alpha1_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkingV1 provides a mock function with given fields:
func (_m *mockClusterClientSet) NetworkingV1() networkingv1.NetworkingV1Interface {
	ret := _m.Called()

	var r0 networkingv1.NetworkingV1Interface
	if rf, ok := ret.Get(0).(func() networkingv1.NetworkingV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(networkingv1.NetworkingV1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_NetworkingV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkingV1'
type mockClusterClientSet_NetworkingV1_Call struct {
	*mock.Call
}

// NetworkingV1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) NetworkingV1() *mockClusterClientSet_NetworkingV1_Call {
	return &mockClusterClientSet_NetworkingV1_Call{Call: _e.mock.On("NetworkingV1")}
}

func (_c *mockClusterClientSet_NetworkingV1_Call) Run(run func()) *mockClusterClientSet_NetworkingV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_NetworkingV1_Call) Return(_a0 networkingv1.NetworkingV1Interface) *mockClusterClientSet_NetworkingV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_NetworkingV1_Call) RunAndReturn(run func() networkingv1.NetworkingV1Interface) *mockClusterClientSet_NetworkingV1_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkingV1alpha1 provides a mock function with given fields:
func (_m *mockClusterClientSet) NetworkingV1alpha1() networkingv1alpha1.NetworkingV1alpha1Interface {
	ret := _m.Called()

	var r0 networkingv1alpha1.NetworkingV1alpha1Interface
	if rf, ok := ret.Get(0).(func() networkingv1alpha1.NetworkingV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(networkingv1alpha1.NetworkingV1alpha1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_NetworkingV1alpha1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkingV1alpha1'
type mockClusterClientSet_NetworkingV1alpha1_Call struct {
	*mock.Call
}

// NetworkingV1alpha1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) NetworkingV1alpha1() *mockClusterClientSet_NetworkingV1alpha1_Call {
	return &mockClusterClientSet_NetworkingV1alpha1_Call{Call: _e.mock.On("NetworkingV1alpha1")}
}

func (_c *mockClusterClientSet_NetworkingV1alpha1_Call) Run(run func()) *mockClusterClientSet_NetworkingV1alpha1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_NetworkingV1alpha1_Call) Return(_a0 networkingv1alpha1.NetworkingV1alpha1Interface) *mockClusterClientSet_NetworkingV1alpha1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_NetworkingV1alpha1_Call) RunAndReturn(run func() networkingv1alpha1.NetworkingV1alpha1Interface) *mockClusterClientSet_NetworkingV1alpha1_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkingV1beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) NetworkingV1beta1() networkingv1beta1.NetworkingV1beta1Interface {
	ret := _m.Called()

	var r0 networkingv1beta1.NetworkingV1beta1Interface
	if rf, ok := ret.Get(0).(func() networkingv1beta1.NetworkingV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(networkingv1beta1.NetworkingV1beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_NetworkingV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkingV1beta1'
type mockClusterClientSet_NetworkingV1beta1_Call struct {
	*mock.Call
}

// NetworkingV1beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) NetworkingV1beta1() *mockClusterClientSet_NetworkingV1beta1_Call {
	return &mockClusterClientSet_NetworkingV1beta1_Call{Call: _e.mock.On("NetworkingV1beta1")}
}

func (_c *mockClusterClientSet_NetworkingV1beta1_Call) Run(run func()) *mockClusterClientSet_NetworkingV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_NetworkingV1beta1_Call) Return(_a0 networkingv1beta1.NetworkingV1beta1Interface) *mockClusterClientSet_NetworkingV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_NetworkingV1beta1_Call) RunAndReturn(run func() networkingv1beta1.NetworkingV1beta1Interface) *mockClusterClientSet_NetworkingV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// NodeV1 provides a mock function with given fields:
func (_m *mockClusterClientSet) NodeV1() nodev1.NodeV1Interface {
	ret := _m.Called()

	var r0 nodev1.NodeV1Interface
	if rf, ok := ret.Get(0).(func() nodev1.NodeV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nodev1.NodeV1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_NodeV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeV1'
type mockClusterClientSet_NodeV1_Call struct {
	*mock.Call
}

// NodeV1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) NodeV1() *mockClusterClientSet_NodeV1_Call {
	return &mockClusterClientSet_NodeV1_Call{Call: _e.mock.On("NodeV1")}
}

func (_c *mockClusterClientSet_NodeV1_Call) Run(run func()) *mockClusterClientSet_NodeV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_NodeV1_Call) Return(_a0 nodev1.NodeV1Interface) *mockClusterClientSet_NodeV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_NodeV1_Call) RunAndReturn(run func() nodev1.NodeV1Interface) *mockClusterClientSet_NodeV1_Call {
	_c.Call.Return(run)
	return _c
}

// NodeV1alpha1 provides a mock function with given fields:
func (_m *mockClusterClientSet) NodeV1alpha1() nodev1alpha1.NodeV1alpha1Interface {
	ret := _m.Called()

	var r0 nodev1alpha1.NodeV1alpha1Interface
	if rf, ok := ret.Get(0).(func() nodev1alpha1.NodeV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nodev1alpha1.NodeV1alpha1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_NodeV1alpha1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeV1alpha1'
type mockClusterClientSet_NodeV1alpha1_Call struct {
	*mock.Call
}

// NodeV1alpha1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) NodeV1alpha1() *mockClusterClientSet_NodeV1alpha1_Call {
	return &mockClusterClientSet_NodeV1alpha1_Call{Call: _e.mock.On("NodeV1alpha1")}
}

func (_c *mockClusterClientSet_NodeV1alpha1_Call) Run(run func()) *mockClusterClientSet_NodeV1alpha1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_NodeV1alpha1_Call) Return(_a0 nodev1alpha1.NodeV1alpha1Interface) *mockClusterClientSet_NodeV1alpha1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_NodeV1alpha1_Call) RunAndReturn(run func() nodev1alpha1.NodeV1alpha1Interface) *mockClusterClientSet_NodeV1alpha1_Call {
	_c.Call.Return(run)
	return _c
}

// NodeV1beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) NodeV1beta1() nodev1beta1.NodeV1beta1Interface {
	ret := _m.Called()

	var r0 nodev1beta1.NodeV1beta1Interface
	if rf, ok := ret.Get(0).(func() nodev1beta1.NodeV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nodev1beta1.NodeV1beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_NodeV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeV1beta1'
type mockClusterClientSet_NodeV1beta1_Call struct {
	*mock.Call
}

// NodeV1beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) NodeV1beta1() *mockClusterClientSet_NodeV1beta1_Call {
	return &mockClusterClientSet_NodeV1beta1_Call{Call: _e.mock.On("NodeV1beta1")}
}

func (_c *mockClusterClientSet_NodeV1beta1_Call) Run(run func()) *mockClusterClientSet_NodeV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_NodeV1beta1_Call) Return(_a0 nodev1beta1.NodeV1beta1Interface) *mockClusterClientSet_NodeV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_NodeV1beta1_Call) RunAndReturn(run func() nodev1beta1.NodeV1beta1Interface) *mockClusterClientSet_NodeV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// PolicyV1 provides a mock function with given fields:
func (_m *mockClusterClientSet) PolicyV1() policyv1.PolicyV1Interface {
	ret := _m.Called()

	var r0 policyv1.PolicyV1Interface
	if rf, ok := ret.Get(0).(func() policyv1.PolicyV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(policyv1.PolicyV1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_PolicyV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PolicyV1'
type mockClusterClientSet_PolicyV1_Call struct {
	*mock.Call
}

// PolicyV1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) PolicyV1() *mockClusterClientSet_PolicyV1_Call {
	return &mockClusterClientSet_PolicyV1_Call{Call: _e.mock.On("PolicyV1")}
}

func (_c *mockClusterClientSet_PolicyV1_Call) Run(run func()) *mockClusterClientSet_PolicyV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_PolicyV1_Call) Return(_a0 policyv1.PolicyV1Interface) *mockClusterClientSet_PolicyV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_PolicyV1_Call) RunAndReturn(run func() policyv1.PolicyV1Interface) *mockClusterClientSet_PolicyV1_Call {
	_c.Call.Return(run)
	return _c
}

// PolicyV1beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) PolicyV1beta1() policyv1beta1.PolicyV1beta1Interface {
	ret := _m.Called()

	var r0 policyv1beta1.PolicyV1beta1Interface
	if rf, ok := ret.Get(0).(func() policyv1beta1.PolicyV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(policyv1beta1.PolicyV1beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_PolicyV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PolicyV1beta1'
type mockClusterClientSet_PolicyV1beta1_Call struct {
	*mock.Call
}

// PolicyV1beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) PolicyV1beta1() *mockClusterClientSet_PolicyV1beta1_Call {
	return &mockClusterClientSet_PolicyV1beta1_Call{Call: _e.mock.On("PolicyV1beta1")}
}

func (_c *mockClusterClientSet_PolicyV1beta1_Call) Run(run func()) *mockClusterClientSet_PolicyV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_PolicyV1beta1_Call) Return(_a0 policyv1beta1.PolicyV1beta1Interface) *mockClusterClientSet_PolicyV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_PolicyV1beta1_Call) RunAndReturn(run func() policyv1beta1.PolicyV1beta1Interface) *mockClusterClientSet_PolicyV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// RbacV1 provides a mock function with given fields:
func (_m *mockClusterClientSet) RbacV1() rbacv1.RbacV1Interface {
	ret := _m.Called()

	var r0 rbacv1.RbacV1Interface
	if rf, ok := ret.Get(0).(func() rbacv1.RbacV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rbacv1.RbacV1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_RbacV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RbacV1'
type mockClusterClientSet_RbacV1_Call struct {
	*mock.Call
}

// RbacV1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) RbacV1() *mockClusterClientSet_RbacV1_Call {
	return &mockClusterClientSet_RbacV1_Call{Call: _e.mock.On("RbacV1")}
}

func (_c *mockClusterClientSet_RbacV1_Call) Run(run func()) *mockClusterClientSet_RbacV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_RbacV1_Call) Return(_a0 rbacv1.RbacV1Interface) *mockClusterClientSet_RbacV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_RbacV1_Call) RunAndReturn(run func() rbacv1.RbacV1Interface) *mockClusterClientSet_RbacV1_Call {
	_c.Call.Return(run)
	return _c
}

// RbacV1alpha1 provides a mock function with given fields:
func (_m *mockClusterClientSet) RbacV1alpha1() rbacv1alpha1.RbacV1alpha1Interface {
	ret := _m.Called()

	var r0 rbacv1alpha1.RbacV1alpha1Interface
	if rf, ok := ret.Get(0).(func() rbacv1alpha1.RbacV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rbacv1alpha1.RbacV1alpha1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_RbacV1alpha1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RbacV1alpha1'
type mockClusterClientSet_RbacV1alpha1_Call struct {
	*mock.Call
}

// RbacV1alpha1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) RbacV1alpha1() *mockClusterClientSet_RbacV1alpha1_Call {
	return &mockClusterClientSet_RbacV1alpha1_Call{Call: _e.mock.On("RbacV1alpha1")}
}

func (_c *mockClusterClientSet_RbacV1alpha1_Call) Run(run func()) *mockClusterClientSet_RbacV1alpha1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_RbacV1alpha1_Call) Return(_a0 rbacv1alpha1.RbacV1alpha1Interface) *mockClusterClientSet_RbacV1alpha1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_RbacV1alpha1_Call) RunAndReturn(run func() rbacv1alpha1.RbacV1alpha1Interface) *mockClusterClientSet_RbacV1alpha1_Call {
	_c.Call.Return(run)
	return _c
}

// RbacV1beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) RbacV1beta1() rbacv1beta1.RbacV1beta1Interface {
	ret := _m.Called()

	var r0 rbacv1beta1.RbacV1beta1Interface
	if rf, ok := ret.Get(0).(func() rbacv1beta1.RbacV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rbacv1beta1.RbacV1beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_RbacV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RbacV1beta1'
type mockClusterClientSet_RbacV1beta1_Call struct {
	*mock.Call
}

// RbacV1beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) RbacV1beta1() *mockClusterClientSet_RbacV1beta1_Call {
	return &mockClusterClientSet_RbacV1beta1_Call{Call: _e.mock.On("RbacV1beta1")}
}

func (_c *mockClusterClientSet_RbacV1beta1_Call) Run(run func()) *mockClusterClientSet_RbacV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_RbacV1beta1_Call) Return(_a0 rbacv1beta1.RbacV1beta1Interface) *mockClusterClientSet_RbacV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_RbacV1beta1_Call) RunAndReturn(run func() rbacv1beta1.RbacV1beta1Interface) *mockClusterClientSet_RbacV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceV1alpha2 provides a mock function with given fields:
func (_m *mockClusterClientSet) ResourceV1alpha2() v1alpha2.ResourceV1alpha2Interface {
	ret := _m.Called()

	var r0 v1alpha2.ResourceV1alpha2Interface
	if rf, ok := ret.Get(0).(func() v1alpha2.ResourceV1alpha2Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha2.ResourceV1alpha2Interface)
		}
	}

	return r0
}

// mockClusterClientSet_ResourceV1alpha2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceV1alpha2'
type mockClusterClientSet_ResourceV1alpha2_Call struct {
	*mock.Call
}

// ResourceV1alpha2 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) ResourceV1alpha2() *mockClusterClientSet_ResourceV1alpha2_Call {
	return &mockClusterClientSet_ResourceV1alpha2_Call{Call: _e.mock.On("ResourceV1alpha2")}
}

func (_c *mockClusterClientSet_ResourceV1alpha2_Call) Run(run func()) *mockClusterClientSet_ResourceV1alpha2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_ResourceV1alpha2_Call) Return(_a0 v1alpha2.ResourceV1alpha2Interface) *mockClusterClientSet_ResourceV1alpha2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_ResourceV1alpha2_Call) RunAndReturn(run func() v1alpha2.ResourceV1alpha2Interface) *mockClusterClientSet_ResourceV1alpha2_Call {
	_c.Call.Return(run)
	return _c
}

// SchedulingV1 provides a mock function with given fields:
func (_m *mockClusterClientSet) SchedulingV1() schedulingv1.SchedulingV1Interface {
	ret := _m.Called()

	var r0 schedulingv1.SchedulingV1Interface
	if rf, ok := ret.Get(0).(func() schedulingv1.SchedulingV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedulingv1.SchedulingV1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_SchedulingV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SchedulingV1'
type mockClusterClientSet_SchedulingV1_Call struct {
	*mock.Call
}

// SchedulingV1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) SchedulingV1() *mockClusterClientSet_SchedulingV1_Call {
	return &mockClusterClientSet_SchedulingV1_Call{Call: _e.mock.On("SchedulingV1")}
}

func (_c *mockClusterClientSet_SchedulingV1_Call) Run(run func()) *mockClusterClientSet_SchedulingV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_SchedulingV1_Call) Return(_a0 schedulingv1.SchedulingV1Interface) *mockClusterClientSet_SchedulingV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_SchedulingV1_Call) RunAndReturn(run func() schedulingv1.SchedulingV1Interface) *mockClusterClientSet_SchedulingV1_Call {
	_c.Call.Return(run)
	return _c
}

// SchedulingV1alpha1 provides a mock function with given fields:
func (_m *mockClusterClientSet) SchedulingV1alpha1() schedulingv1alpha1.SchedulingV1alpha1Interface {
	ret := _m.Called()

	var r0 schedulingv1alpha1.SchedulingV1alpha1Interface
	if rf, ok := ret.Get(0).(func() schedulingv1alpha1.SchedulingV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedulingv1alpha1.SchedulingV1alpha1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_SchedulingV1alpha1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SchedulingV1alpha1'
type mockClusterClientSet_SchedulingV1alpha1_Call struct {
	*mock.Call
}

// SchedulingV1alpha1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) SchedulingV1alpha1() *mockClusterClientSet_SchedulingV1alpha1_Call {
	return &mockClusterClientSet_SchedulingV1alpha1_Call{Call: _e.mock.On("SchedulingV1alpha1")}
}

func (_c *mockClusterClientSet_SchedulingV1alpha1_Call) Run(run func()) *mockClusterClientSet_SchedulingV1alpha1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_SchedulingV1alpha1_Call) Return(_a0 schedulingv1alpha1.SchedulingV1alpha1Interface) *mockClusterClientSet_SchedulingV1alpha1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_SchedulingV1alpha1_Call) RunAndReturn(run func() schedulingv1alpha1.SchedulingV1alpha1Interface) *mockClusterClientSet_SchedulingV1alpha1_Call {
	_c.Call.Return(run)
	return _c
}

// SchedulingV1beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) SchedulingV1beta1() schedulingv1beta1.SchedulingV1beta1Interface {
	ret := _m.Called()

	var r0 schedulingv1beta1.SchedulingV1beta1Interface
	if rf, ok := ret.Get(0).(func() schedulingv1beta1.SchedulingV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(schedulingv1beta1.SchedulingV1beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_SchedulingV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SchedulingV1beta1'
type mockClusterClientSet_SchedulingV1beta1_Call struct {
	*mock.Call
}

// SchedulingV1beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) SchedulingV1beta1() *mockClusterClientSet_SchedulingV1beta1_Call {
	return &mockClusterClientSet_SchedulingV1beta1_Call{Call: _e.mock.On("SchedulingV1beta1")}
}

func (_c *mockClusterClientSet_SchedulingV1beta1_Call) Run(run func()) *mockClusterClientSet_SchedulingV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_SchedulingV1beta1_Call) Return(_a0 schedulingv1beta1.SchedulingV1beta1Interface) *mockClusterClientSet_SchedulingV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_SchedulingV1beta1_Call) RunAndReturn(run func() schedulingv1beta1.SchedulingV1beta1Interface) *mockClusterClientSet_SchedulingV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

// StorageV1 provides a mock function with given fields:
func (_m *mockClusterClientSet) StorageV1() storagev1.StorageV1Interface {
	ret := _m.Called()

	var r0 storagev1.StorageV1Interface
	if rf, ok := ret.Get(0).(func() storagev1.StorageV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storagev1.StorageV1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_StorageV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StorageV1'
type mockClusterClientSet_StorageV1_Call struct {
	*mock.Call
}

// StorageV1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) StorageV1() *mockClusterClientSet_StorageV1_Call {
	return &mockClusterClientSet_StorageV1_Call{Call: _e.mock.On("StorageV1")}
}

func (_c *mockClusterClientSet_StorageV1_Call) Run(run func()) *mockClusterClientSet_StorageV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_StorageV1_Call) Return(_a0 storagev1.StorageV1Interface) *mockClusterClientSet_StorageV1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_StorageV1_Call) RunAndReturn(run func() storagev1.StorageV1Interface) *mockClusterClientSet_StorageV1_Call {
	_c.Call.Return(run)
	return _c
}

// StorageV1alpha1 provides a mock function with given fields:
func (_m *mockClusterClientSet) StorageV1alpha1() storagev1alpha1.StorageV1alpha1Interface {
	ret := _m.Called()

	var r0 storagev1alpha1.StorageV1alpha1Interface
	if rf, ok := ret.Get(0).(func() storagev1alpha1.StorageV1alpha1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storagev1alpha1.StorageV1alpha1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_StorageV1alpha1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StorageV1alpha1'
type mockClusterClientSet_StorageV1alpha1_Call struct {
	*mock.Call
}

// StorageV1alpha1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) StorageV1alpha1() *mockClusterClientSet_StorageV1alpha1_Call {
	return &mockClusterClientSet_StorageV1alpha1_Call{Call: _e.mock.On("StorageV1alpha1")}
}

func (_c *mockClusterClientSet_StorageV1alpha1_Call) Run(run func()) *mockClusterClientSet_StorageV1alpha1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_StorageV1alpha1_Call) Return(_a0 storagev1alpha1.StorageV1alpha1Interface) *mockClusterClientSet_StorageV1alpha1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_StorageV1alpha1_Call) RunAndReturn(run func() storagev1alpha1.StorageV1alpha1Interface) *mockClusterClientSet_StorageV1alpha1_Call {
	_c.Call.Return(run)
	return _c
}

// StorageV1beta1 provides a mock function with given fields:
func (_m *mockClusterClientSet) StorageV1beta1() storagev1beta1.StorageV1beta1Interface {
	ret := _m.Called()

	var r0 storagev1beta1.StorageV1beta1Interface
	if rf, ok := ret.Get(0).(func() storagev1beta1.StorageV1beta1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storagev1beta1.StorageV1beta1Interface)
		}
	}

	return r0
}

// mockClusterClientSet_StorageV1beta1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StorageV1beta1'
type mockClusterClientSet_StorageV1beta1_Call struct {
	*mock.Call
}

// StorageV1beta1 is a helper method to define mock.On call
func (_e *mockClusterClientSet_Expecter) StorageV1beta1() *mockClusterClientSet_StorageV1beta1_Call {
	return &mockClusterClientSet_StorageV1beta1_Call{Call: _e.mock.On("StorageV1beta1")}
}

func (_c *mockClusterClientSet_StorageV1beta1_Call) Run(run func()) *mockClusterClientSet_StorageV1beta1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockClusterClientSet_StorageV1beta1_Call) Return(_a0 storagev1beta1.StorageV1beta1Interface) *mockClusterClientSet_StorageV1beta1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockClusterClientSet_StorageV1beta1_Call) RunAndReturn(run func() storagev1beta1.StorageV1beta1Interface) *mockClusterClientSet_StorageV1beta1_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockClusterClientSet interface {
	mock.TestingT
	Cleanup(func())
}

// newMockClusterClientSet creates a new instance of mockClusterClientSet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockClusterClientSet(t mockConstructorTestingTnewMockClusterClientSet) *mockClusterClientSet {
	mock := &mockClusterClientSet{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
